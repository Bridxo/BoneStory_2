{"version":3,"file":"provenance-tree-visualization.es5.js","sources":["../src/gratzl.ts","../src/controls.ts","../src/utils.ts","../src/aggregation/aggregation-implementations.ts","../src/aggregation/aggregation-objects.ts","../src/legend.ts","../src/components.ts","../src/gratzl_old.ts","../src/caterpillar.ts","../src/provenance-tree-visualization.ts"],"sourcesContent":["import { HierarchyNode, HierarchyPointNode } from \"d3-hierarchy\";\r\n\r\nfunction depthSort(\r\n  a: IHierarchyPointNodeWithMaxDepth<any>,\r\n  b: IHierarchyPointNodeWithMaxDepth<any>\r\n) {\r\n  if (a.maxDescendantDepth > b.maxDescendantDepth) {\r\n    return -1;\r\n  } else if (a.maxDescendantDepth < b.maxDescendantDepth) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nexport interface IGratzlLayout<Datum> {\r\n  (\r\n    root: HierarchyNode<Datum>,\r\n    activeNode: HierarchyNode<Datum>\r\n  ): IHierarchyPointNodeWithMaxDepth<Datum>;\r\n  size(): [number, number];\r\n  size(size: [number, number]): this;\r\n}\r\n\r\nexport interface IHierarchyPointNodeWithMaxDepth<T>\r\n  extends HierarchyPointNode<T> {\r\n  maxDescendantDepth: number;\r\n  data: any;\r\n  // xOffset: number;\r\n  // x, y, links()\r\n}\r\n\r\nexport default function GratzlLayout<T>(\r\n  _root: HierarchyNode<T>,\r\n  _current: HierarchyNode<T>\r\n): IHierarchyPointNodeWithMaxDepth<T> {\r\n  const root = _root as IHierarchyPointNodeWithMaxDepth<T>;\r\n  const current = _current as IHierarchyPointNodeWithMaxDepth<T>;\r\n  const widths: number[] = [];\r\n  // const maxY = Math.max.apply(null, root.leaves().map((leaf) => leaf.depth));\r\n\r\n  function setTreeX(node: IHierarchyPointNodeWithMaxDepth<T>, val: number) {\r\n    node.x = val;\r\n    node.y = node.depth;\r\n    widths[node.depth] = val;\r\n    if (node.children) {\r\n      node\r\n        .leaves()\r\n        .forEach(leaf => {\r\n          if (typeof leaf.x === \"undefined\") {\r\n            const width = Math.max.apply(\r\n              null,\r\n              widths.slice(node.depth, leaf.depth + 1)\r\n            );\r\n            setTreeX(leaf, val > width ? val : width + 1);\r\n          }\r\n        });\r\n    }\r\n\r\n    if (node.parent && typeof node.parent.x === \"undefined\") {\r\n      setTreeX(node.parent, val);\r\n    }\r\n  }\r\n\r\n  root.leaves().forEach(leaf => {\r\n    leaf.ancestors().forEach(leafAncestor => {\r\n      if (\r\n        !leafAncestor.maxDescendantDepth ||\r\n        leaf.depth > leafAncestor.maxDescendantDepth\r\n      ) {\r\n        leafAncestor.maxDescendantDepth = leaf.depth;\r\n      }\r\n    });\r\n  });\r\n\r\n  /* start at the deepest (active) leaf of activeNode. */\r\n  let deepestLeaf = current;\r\n  deepestLeaf.leaves().forEach(leaf => {\r\n    if (leaf.data.wrappedNodes[0].metadata.mainbranch) {\r\n      deepestLeaf = leaf;\r\n    }\r\n    else if (leaf.depth > deepestLeaf.depth && !deepestLeaf.data.wrappedNodes[0].metadata.mainbranch) {\r\n      deepestLeaf = leaf;\r\n    }\r\n  });\r\n\r\n  setTreeX(deepestLeaf,0 );\r\n\r\n  return root;\r\n}\r\n","import { ProvenanceTreeVisualization } from './provenance-tree-visualization';\r\nimport { StateNode } from '@visualstorytelling/provenance-core';\r\n\r\n\r\nexport function provGraphControls(provenanceTreeVisualization: ProvenanceTreeVisualization) {\r\n    var graph = provenanceTreeVisualization.traverser.graph;\r\n    var traverser = provenanceTreeVisualization.traverser;\r\n    \r\n\r\n    window.onkeydown = keyPress;\r\n\r\n    let isProcessingKey = false; // Lock\r\n\r\n    async function keyPress(e: any) {\r\n        var evtobj = window.event ? event : e;\r\n        if(isProcessingKey) return;\r\n        // ctrl + Z  / undo\r\n        if (evtobj.ctrlKey && evtobj.key === 'z' && (graph.current as StateNode).parent) {\r\n            isProcessingKey = true;\r\n            var real_traverser = provenanceTreeVisualization.real_traverser;\r\n            var parent_id = '';\r\n            real_traverser\r\n            .filter((d: any) => {\r\n              const ref = d.data.wrappedNodes.includes(graph.current);\r\n              if(ref){\r\n                const index = d.data.wrappedNodes.indexOf(graph.current);\r\n                if(index!=d.data.wrappedNodes.length-1)\r\n                    parent_id = d.data.wrappedNodes[index+1].id;\r\n                else\r\n                    parent_id = d.parent.data.wrappedNodes[0].id;\r\n              }\r\n            });\r\n            await traverser.toStateNode(parent_id, 250);\r\n            await provenanceTreeVisualization.getFullsizeview();\r\n            await provenanceTreeVisualization.update();\r\n            setTimeout(() => {\r\n                isProcessingKey = false;\r\n            }, 300);\r\n        }\r\n        // ctrl + X  / go to the root\r\n        else if (evtobj.ctrlKey && evtobj.key === 'x') {\r\n            isProcessingKey = true;\r\n            await traverser.toStateNode(graph.root.id, 0);\r\n            setTimeout(() => {\r\n                isProcessingKey = false;\r\n            }, 250);\r\n        }\r\n        // ctrl + y  / redo\r\n        else if (evtobj.ctrlKey && evtobj.key === 'y' && graph.current.children[0]) {\r\n            isProcessingKey = true;\r\n            var real_traverser = provenanceTreeVisualization.real_traverser;\r\n            var child_id = '';\r\n            real_traverser\r\n            .filter((d: any) => {\r\n              const ref = d.data.wrappedNodes.includes(graph.current);\r\n              if(ref){\r\n                const index = d.data.wrappedNodes.indexOf(graph.current);\r\n                if(index!=0)\r\n                    child_id = d.data.wrappedNodes[index-1].id;\r\n                else{\r\n                    if(d.data.wrappedNodes[0].children)\r\n                    {\r\n                        d.data.wrappedNodes[0].children.forEach((child: any) => {\r\n                            if(child.metadata.mainbranch){\r\n                                child_id = child.id;\r\n                            }\r\n                        });\r\n                    }\r\n                    \r\n                }\r\n                \r\n\r\n              }\r\n            });\r\n            await traverser.toStateNode(child_id, 250);\r\n            await provenanceTreeVisualization.getFullsizeview();\r\n            await provenanceTreeVisualization.update();\r\n            setTimeout(() => {\r\n                isProcessingKey = false;\r\n            }, 300);\r\n        }\r\n        // ctrl + Q  / add the current node to the story\r\n        else if (evtobj.keyCode === 81 && evtobj.altKey) {\r\n            graph.current.metadata.story = true;\r\n            (window as any).slideDeck.onAdd(graph.current);\r\n        }\r\n        // // ctrl + 1  / all neighbour nodes are added to the slide deck (by creation order)\r\n        // else if (evtobj.keyCode === 49 && evtobj.altKey) {\r\n        //     let nodes = graph.getNodes();\r\n        //     var arrayNodes = [];\r\n\r\n        //     for (const nodeId of Object.keys(nodes)) {\r\n        //         let node = nodes[nodeId];\r\n        //         arrayNodes.push(node);\r\n        //     }\r\n\r\n        //     for (const node of arrayNodes) {\r\n        //         if (((node.metadata.creationOrder > graph.current.metadata.creationOrder - 2) == true) &&     // the range can be adjusted\r\n        //             ((node.metadata.creationOrder < graph.current.metadata.creationOrder + 2) == true)) {\r\n        //             node.metadata.story = true;\r\n        //             (window as any).slideDeck.onAdd(node);\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        // // ctrl + W  / derivation and annotation (by creation order)\r\n        // else if (evtobj.keyCode === 87 && evtobj.altKey) {\r\n        //     let nodes = graph.getNodes();\r\n        //     var arrayNodes: any[] = [];\r\n\r\n        //     for (const nodeId of Object.keys(nodes)) {\r\n        //         let node = nodes[nodeId];\r\n        //         arrayNodes.push(node);\r\n        //     }\r\n\r\n        //     arrayNodes.shift();\r\n\r\n        //     for (const node of (arrayNodes as any).filter((node: any) => node.action.metadata.userIntent == 'derivation' || 'annotation')) {\r\n        //         node.metadata.story = true;\r\n        //         (window as any).slideDeck.onAdd(node);\r\n        //     }\r\n        // }\r\n        provenanceTreeVisualization.update();\r\n    }\r\n\r\n    // ngAfterViewChecked() {\r\n    //   this._viz.setZoomExtent();\r\n    // }\r\n\r\n    (function () {\r\n        var blockContextMenu;\r\n\r\n        blockContextMenu = function (evt: any) {\r\n            evt.preventDefault();\r\n        };\r\n\r\n        window.addEventListener('contextmenu', blockContextMenu);\r\n    })();\r\n\r\n}\r\n","export interface IGroupedTreeNode<T> {\r\n  children: Array<IGroupedTreeNode<T>>;\r\n  wrappedNodes: T[];\r\n  plotTrimmerValue: number;\r\n  camera: boolean;\r\n  neighbour: boolean;\r\n  bookmarked: boolean;\r\n}\r\n\r\nexport const copyTree = <T>(node: IGroupedTreeNode<T>): typeof node => {\r\n  return {\r\n    ...node,\r\n    children: node.children.map(copyTree)\r\n  };\r\n};\r\n\r\nexport const preOrderTraversal = <T>(\r\n  node: IGroupedTreeNode<T>,\r\n  cb: (n: typeof node) => any\r\n) => {\r\n  cb(node);\r\n  node.children.map(child => preOrderTraversal(child, cb));\r\n};\r\n\r\nexport type NodeGroupTest<T> = (\r\n  a: IGroupedTreeNode<T>,\r\n  b: IGroupedTreeNode<T>\r\n) => boolean;\r\n\r\nexport const group = <T>(node: IGroupedTreeNode<T>, test: NodeGroupTest<T>) => {\r\n  let merged = false;\r\n  do {\r\n    merged = false;\r\n    for (const child of node.children) {\r\n      if (test(node, child)) {\r\n        node.children.splice(node.children.indexOf(child), 1);\r\n        node.children.push(...child.children);\r\n        node.wrappedNodes.push(...child.wrappedNodes);\r\n        merged = true;\r\n        break;\r\n      }\r\n    }\r\n  } while (merged);\r\n  node.children.map(child => group(child, test));\r\n};\r\n\r\n\r\nexport const cam_test = <T>(label: any) => {\r\n  const searchpattern = /Camera|View/;\r\n  if(searchpattern.test(label))\r\n    return true;\r\n  else\r\n    return false;\r\n};","import { IGroupedTreeNode } from \"../utils\";\r\nimport {\r\n  ProvenanceNode,\r\n  isStateNode\r\n} from \"@visualstorytelling/provenance-core\";\r\n\r\n/**\r\n * @description Type for the tests for aggregating data.\r\n * @param a {IGroupedTreeNode<ProvenanceNode>} -\r\n * @param b {IGroupedTreeNode<ProvenanceNode>} -\r\n * @returns Returns true if the nodes has passed the test.\r\n */\r\nexport type NodeGroupTest<T> = (\r\n  a: IGroupedTreeNode<T>,\r\n  b: IGroupedTreeNode<T>\r\n) => boolean;\r\n\r\n/**\r\n * @description Type for the data aggregation algorithms\r\n * @param currentNode {IGroupedTreeNode<ProvenanceNode>} - Selected node.\r\n * @param node {IGroupedTreeNode<ProvenanceNode>} - Root of the tree.\r\n * @param test {NodeGroupTest<ProvenanceNode>} - Test to be executed.\r\n * @param mainBranch {Array<String>} - List of node's id which belong to the master branch.\r\n * @param par {any} - Optional parameter required for the algorithm\r\n */\r\nexport type NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[],\r\n  mainBranch?: Array<string>,\r\n  par?: any\r\n) => void;\r\n\r\n/**\r\n * @description Interface defines aggregation strategy.\r\n * @param name {string} - Name of the procedure\r\n * @param test {NodeGroupTest<ProvenanceNode>} - Test to be executed;\r\n * @param algorithm {NodeAggregationAlgorithm} - Algorithm to be performed;\r\n * @param arg {any} - Optional parameter if needed.\r\n * @param description {String} - Description of the procedure.\r\n */\r\nexport interface NodeAggregator<T> {\r\n  name: string;\r\n  tests: NodeGroupTest<T>[];\r\n  algorithm: NodeAggregationAlgorithm;\r\n  arg?: any;\r\n  description?: String;\r\n}\r\n\r\n/**\r\n * @description Child removed, child's children go to the parent.\r\n * @param node {IGroupedTreeNode<ProvenanceNode>} - Parent node\r\n * @param child {IGroupedTreeNode<ProvenanceNode>} - Child node\r\n */\r\nexport function transferToParent(\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  child: IGroupedTreeNode<ProvenanceNode>\r\n) {\r\n  const index = node.children.indexOf(child);\r\n  node.children.splice(index, 1);\r\n  node.children.push(...child.children);\r\n  node.wrappedNodes.unshift(...child.wrappedNodes);\r\n}\r\n\r\n/**\r\n * @description Child removed, child's children go to grandChild. GrandChild becomes node's child.\r\n * @param node {IGroupedTreeNode<ProvenanceNode>} - Parent node\r\n * @param child {IGroupedTreeNode<ProvenanceNode>} - Child node\r\n * @param grandChild {IGroupedTreeNode<ProvenanceNode>} - Child of the child node\r\n */\r\nexport function transferChildren(\r\n  node: any,\r\n  child: any,\r\n  grandChild: any\r\n) {\r\n  //data part\r\n  node.data.children.splice(node.data.children.indexOf(child.data), 1);\r\n  grandChild.data.wrappedNodes.push(...child.data.wrappedNodes);\r\n  child.data.children.splice(child.data.children.indexOf(grandChild.data), 1);\r\n  node.data.children.push(grandChild.data);\r\n}\r\nexport function transferChildren_2(\r\n  Startparentnode: any,\r\n  Startnode: any,\r\n  Endnode: any\r\n) {\r\n  //data part\r\n  let tempNode = Endnode.parent;\r\n  let superParent = Startparentnode.parent;\r\n  do{\r\n    tempNode.data.children.splice(tempNode.data.children.indexOf(Endnode.data),1);\r\n    Endnode.data.wrappedNodes.push(...tempNode.data.wrappedNodes);\r\n    tempNode = tempNode.parent;\r\n  }while(tempNode.data != Startparentnode.data)\r\n  Startparentnode.data.children.splice(Startparentnode.data.children.indexOf(Startnode.data), 1);\r\n  Endnode.data.wrappedNodes.push(...Startparentnode.data.wrappedNodes);\r\n  superParent.data.children.splice(superParent.data.children.indexOf(Startparentnode.data), 1);\r\n  superParent.data.children.push(Endnode.data);\r\n}\r\n\r\n/**\r\n * @description Pointed node wraps ALL children recursively\r\n * @param node {IGroupedTreeNode<ProvenanceNode>} - Selected node\r\n */\r\nexport function transferAll(node: IGroupedTreeNode<ProvenanceNode>) {\r\n  let done: boolean;\r\n  do {\r\n    done = false;\r\n    if (node.children) {\r\n      for (const child of node.children) {\r\n        transferToParent(node, child);\r\n        done = true;\r\n      }\r\n    }\r\n  } while (done);\r\n}\r\n\r\n/**\r\n * @description Test whether a node should be constrained based on the currently selected node.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - The node to test.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Currently selected node.\r\n */\r\nexport function shouldConstrain(\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  selectedNode: IGroupedTreeNode<ProvenanceNode>\r\n): boolean {\r\n  let result = false;\r\n  const rawNode = node.wrappedNodes[0];\r\n\r\n  if (node === selectedNode || rawNode.metadata.bookmarked) {\r\n    result = true;\r\n  } else if (node.children.includes(selectedNode)) {\r\n    result = true;\r\n  } else if (selectedNode.children.includes(node)) {\r\n    result = true;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description Test whether a node is a leaf node.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - The node to test.\r\n */\r\nexport function isLeafNode(node: IGroupedTreeNode<ProvenanceNode>): boolean {\r\n  let result = false;\r\n\r\n  if (node.children.length === 0) {\r\n    result = true;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description Test whether a node is an interval node.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - The node to test.\r\n */\r\nexport function isIntervalNode(\r\n  node: IGroupedTreeNode<ProvenanceNode>\r\n): boolean {\r\n  let result = false;\r\n\r\n  if (node.children.length === 1) {\r\n    result = true;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description Test whether two nodes are neighbours.\r\n * @param  a  {IGroupedTreeNode<ProvenanceNode>} - The first node to test.\r\n * @param  b  {IGroupedTreeNode<ProvenanceNode>} - The second node to test.\r\n */\r\nexport function areNeighbours(\r\n  a: IGroupedTreeNode<ProvenanceNode>,\r\n  b: IGroupedTreeNode<ProvenanceNode>\r\n): boolean {\r\n  let result = false;\r\n\r\n  if (b.children.includes(a)) {\r\n    result = true;\r\n  } else if (a.children.includes(b)) {\r\n    result = true;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description Calculate the distance of this node to any node in the main (selected) branch.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - The node to test.\r\n * @param  mainBranch  {Array<string>} - List of node ids which belong to the master branch.\r\n */\r\nexport function distanceToMainBranch(\r\n  node: ProvenanceNode,\r\n  mainBranch: Array<string> | undefined\r\n): number {\r\n  let result = 0;\r\n\r\n  if (mainBranch === undefined) {\r\n    result = 0;\r\n  } else if (isStateNode(node) && mainBranch.includes(node.id)) {\r\n    result = 0;\r\n  } else {\r\n    if (isStateNode(node)) {\r\n      result = 1 + distanceToMainBranch(node.parent, mainBranch);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @description Returns the minimum depth possible from the node selected.\r\n * @param node {IGroupedTreeNode<ProvenanceNode>} - Selected node\r\n * @returns Number of nodes you have to cross to go to the deepest leaf from the node selected.\r\n */\r\nexport const minDepth = <T>(node: IGroupedTreeNode<T>): number => {\r\n  if (node.children.length === 0) {\r\n    return 0;\r\n  }\r\n  return Math.min(...node.children.map(minDepth)) + 1;\r\n};\r\n\r\n/**\r\n * @description Returns the maximum depth possible from the node selected.\r\n * @param node {IGroupedTreeNode<ProvenanceNode>} - Selected node\r\n * @returns Number of nodes you have to cross to go to the deepest leaf from the node selected.\r\n */\r\nexport const maxDepth = <T>(node: IGroupedTreeNode<T>): number => {\r\n  if (node.children.length === 0) {\r\n    return 1;\r\n  }\r\n  return Math.max(...node.children.map(maxDepth)) + 1;\r\n};\r\n\r\n/**\r\n * @description Returns the distance to the subroot from the node selected.\r\n * @param provNode {ProvenanceNode} - Selected node\r\n * @returns Number of nodes you have to cross to go to the subroot up from the node selected.\r\n */\r\nexport const subrootDist = (provNode: ProvenanceNode): number => {\r\n  let value = 0;\r\n\r\n  if (!isStateNode(provNode)) {\r\n    value = 0;\r\n  } else if (isStateNode(provNode)) {\r\n    if (provNode.parent.children.length > 1) {\r\n      value = 1;\r\n    } else {\r\n      value = 1 + subrootDist(provNode.parent);\r\n    }\r\n  }\r\n  return value;\r\n};\r\n\r\n/**\r\n * @description Returns the number of conexions with the node selected.\r\n * @param node {IGroupedTreeNode<ProvenanceNode>} - Selected node\r\n * @returns Number of nodes you have to cross to go to the deepest leaf from the node selected.\r\n */\r\nexport const connectivity = (node: IGroupedTreeNode<ProvenanceNode>) => {\r\n  return 1 + node.children.length;\r\n};\r\n\r\n/**\r\n * @description Return the first node found in nodes that also belongs to the main branch of the tree.\r\n * @param  mainBranch  {Array<string>} - List of node ids which belong to the master branch.\r\n * @param  nodes  {Array<IGroupedTreeNode<ProvenanceNode>>} - List of nodes to test.\r\n */\r\nconst mainNode = (\r\n  mainBranch: Array<string>,\r\n  nodes: Array<IGroupedTreeNode<ProvenanceNode>>\r\n): IGroupedTreeNode<ProvenanceNode> | undefined => {\r\n  let mNode;\r\n  for (const node of nodes) {\r\n    if (mainBranch.includes(node.wrappedNodes[0].id)) {\r\n      mNode = node;\r\n      break;\r\n    }\r\n  }\r\n  return mNode;\r\n};\r\n\r\n/**\r\n * @description Compare the depth of two selected nodes.\r\n * @param  node1  {IGroupedTreeNode<ProvenanceNode>} - Selected node #1\r\n * @param  node2  {IGroupedTreeNode<ProvenanceNode>} - Selected node #2\r\n */\r\nconst nodeDepthComparison = <T>(\r\n  node1: IGroupedTreeNode<T>,\r\n  node2: IGroupedTreeNode<T>\r\n): number => {\r\n  if (maxDepth(node1) > maxDepth(node2)) {\r\n    return 1;\r\n  } else if (maxDepth(node1) < maxDepth(node2)) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst mergemarking = () => {\r\n\r\n};\r\n\r\n/**\r\n * @description Test everything.\r\n * @param tests {Array<NodeGroupTest<ProvenanceNode>>} - The tests to run\r\n * @param  node1  {IGroupedTreeNode<ProvenanceNode>} - Selected node #1\r\n * @param  node2  {IGroupedTreeNode<ProvenanceNode>} - Selected node #2\r\n * @returns true only if all tests return true\r\n */\r\nconst testAll = (\r\n  tests: Array<NodeGroupTest<ProvenanceNode>>,\r\n  node1: IGroupedTreeNode<ProvenanceNode>,\r\n  node2: IGroupedTreeNode<ProvenanceNode>\r\n): boolean => {\r\n  let result = true;\r\n\r\n  for (const test of tests) {\r\n    result = test(node1, node2);\r\n    if (!result) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n// /**\r\n//  * @description Constrain neighbours\r\n//  * @param node {IGroupedTreeNode<ProvenanceNode>} - Node\r\n//  * @param selectedNode {IGroupedTreeNode<ProvenanceNode>} - Selected node\r\n//  */\r\n// export const neighbours = (node: IGroupedTreeNode<ProvenanceNode>, selectedNode: IGroupedTreeNode<ProvenanceNode>) => {\r\n//   let neighbour = false;\r\n\r\n//   if (node === selectedNode || selectedNode.children.includes(node) || node.children.includes(selectedNode)) {\r\n//     neighbour = true;\r\n//   }\r\n\r\n//   node.neighbour = neighbour;\r\n\r\n//   for (const child of node.children) {\r\n//     neighbours(child, selectedNode);\r\n//   }\r\n// };\r\n\r\n/////////////////// DIFFERENT DATA AGGREGATION ALGORITHM ///////////\r\n/**\r\n * @description No algorithm is applied. Created for a better understanding.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  tests  {Array<NodeGroupTest<ProvenanceNode>>} - Test to be checked during execution.\r\n * @param  currentNode  {IGroupedTreeNode<ProvenanceNode>} -\r\n */\r\nexport const doNothing: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[]\r\n) => { };\r\n\r\n/**\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  tests  {Array<NodeGroupTest<ProvenanceNode>>} - Tests to be checked during execution.\r\n */\r\nexport const group: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[]\r\n) => {\r\n  let merged = false;\r\n  do {\r\n    merged = false;\r\n    for (const child of node.children) {\r\n      if (!shouldConstrain(child, currentNode)) {\r\n        for (const grandChild of child.children) {\r\n          if (testAll(tests, child, grandChild)) {\r\n            transferChildren(node, child, grandChild);\r\n            merged = true;\r\n            break;\r\n          }\r\n        }\r\n        if (merged) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } while (merged);\r\n  node.children.map(child => group(currentNode, child, tests));\r\n};\r\n\r\n/**\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  tests  {Array<NodeGroupTest<ProvenanceNode>>} - Tests to be checked during execution.\r\n */\r\nexport const compress: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[]\r\n) => {\r\n  let merged = false;\r\n  do {\r\n    merged = false;\r\n    for (const child of node.children) {\r\n      if (!shouldConstrain(child, currentNode)) {\r\n        if (testAll(tests, node, child)) {\r\n          transferToParent(node, child);\r\n          merged = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } while (merged);\r\n  node.children.map(child => compress(currentNode, child, tests));\r\n};\r\n\r\n/**\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  tests  {Array<NodeGroupTest<ProvenanceNode>>} - Tests to be checked during execution.\r\n * @param mainBranch {Array<string>} - List of node's id which belong to the master branch.\r\n * @param arg {any} - Optinal parameter\r\n */\r\nexport const prune: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[],\r\n  mainBranch: Array<string> | undefined,\r\n  arg: any\r\n) => {\r\n  const parameter: number = +arg;\r\n  let merged = false;\r\n\r\n  do {\r\n    merged = false;\r\n    const p = arg;\r\n\r\n    for (const child of node.children) {\r\n      if (!shouldConstrain(child, currentNode)) {\r\n        const dist = distanceToMainBranch(child.wrappedNodes[0], mainBranch);\r\n        if (isLeafNode(child)) {\r\n          if (dist <= p) {\r\n            transferToParent(node, child);\r\n            merged = true;\r\n          }\r\n        } else {\r\n          for (const grandChild of child.children) {\r\n            if (\r\n              !shouldConstrain(grandChild, currentNode) &&\r\n              distanceToMainBranch(child.wrappedNodes[0], mainBranch) > 0\r\n            ) {\r\n              const childDepth = maxDepth(child);\r\n              if (dist + childDepth <= p) {\r\n                transferChildren(node, child, grandChild);\r\n                merged = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } while (merged);\r\n  node.children.map(child =>\r\n    prune(currentNode, child, tests, mainBranch, parameter)\r\n  );\r\n};\r\n\r\n/**\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  tests  {Array<NodeGroupTest<ProvenanceNode>>} - Test to be checked during execution.\r\n * @param arg {any} - Optinal parameter\r\n */\r\nexport const plotTrimmerFunc: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[],\r\n  mainBranch: Array<string> | undefined,\r\n  arg: any\r\n) => {\r\n  trimmer(currentNode, node, tests, mainBranch, arg);\r\n};\r\nexport const trimmerAssignValues = (node: IGroupedTreeNode<ProvenanceNode>) => {\r\n  // Leaf value = subroot distance * 2\r\n  // Interval nodes value = 1\r\n  // Subroots value = Minimum subroot distance of children * 2 + 1\r\n  let value = 0;\r\n\r\n  if (!isStateNode(node.wrappedNodes[0]) === null) {\r\n    value = Number.MAX_VALUE;\r\n  } else if (connectivity(node) === 1) {\r\n    // Leaf node\r\n    value = subrootDist(node.wrappedNodes[0]) * 2;\r\n  } else if (connectivity(node) === 2) {\r\n    // Interval node\r\n    value = 1;\r\n  } else {\r\n    // Subroot\r\n    value = minDepth(node) * 2 + 1;\r\n  }\r\n\r\n  node.plotTrimmerValue = value;\r\n\r\n  for (const child of node.children) {\r\n    trimmerAssignValues(child);\r\n  }\r\n};\r\n\r\n/**\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  tests  {Array<NodeGroupTest<ProvenanceNode>>} - Test to be checked during execution.\r\n * @param arg {any} - Optinal parameter\r\n */\r\nconst trimmer: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[],\r\n  mainBranch: Array<string> | undefined,\r\n  arg: any\r\n) => {\r\n  const parameter: number = +arg;\r\n  let merged: boolean;\r\n\r\n  trimmerAssignValues(node);\r\n\r\n  do {\r\n    merged = false;\r\n\r\n    for (const child of node.children) {\r\n      if (!shouldConstrain(child, currentNode)) {\r\n        if (parameter >= child.plotTrimmerValue) {\r\n          transferToParent(node, child);\r\n          merged = true;\r\n        }\r\n      }\r\n    }\r\n  } while (merged);\r\n  node.children.map(child =>\r\n    trimmer(currentNode, child, tests, mainBranch, parameter)\r\n  );\r\n};\r\n\r\n/**\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  test  {IGroupedTreeNode<ProvenanceNode>} - Test to be checked during execution.\r\n * @param arg {any} - Optinal parameter\r\n */\r\nexport const plotTrimmerFuncG: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[],\r\n  mainBranch: Array<string> | undefined,\r\n  arg: any\r\n) => {\r\n  const parameter = +arg;\r\n  let prunePar = 0;\r\n\r\n  for (let i = 0; i <= parameter; i++) {\r\n    if (i % 2 === 0 && i !== 0) {\r\n      prunePar = prunePar + 1;\r\n      prune(currentNode, node, tests, mainBranch, prunePar);\r\n    } else {\r\n      group(currentNode, node, tests);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Root of the graph\r\n * @param  test  {IGroupedTreeNode<ProvenanceNode>} - Test to be checked during execution.\r\n * @param arg {any} - Optinal parameter\r\n */\r\nexport const plotTrimmerFuncC: NodeAggregationAlgorithm = (\r\n  currentNode: IGroupedTreeNode<ProvenanceNode>,\r\n  node: IGroupedTreeNode<ProvenanceNode>,\r\n  tests: NodeGroupTest<ProvenanceNode>[],\r\n  mainBranch: Array<string> | undefined,\r\n  arg: any\r\n) => {\r\n  const parameter = +arg;\r\n  let prunePar = 0;\r\n\r\n  for (let i = 0; i <= parameter; i++) {\r\n    if (i % 2 === 0 && i !== 0) {\r\n      prunePar = prunePar + 1;\r\n      prune(currentNode, node, tests, mainBranch, prunePar);\r\n    } else {\r\n      compress(currentNode, node, tests);\r\n    }\r\n  }\r\n};\r\n","import {\r\n  compress,\r\n  NodeAggregator,\r\n  doNothing,\r\n  group,\r\n  NodeGroupTest,\r\n  plotTrimmerFunc,\r\n  prune,\r\n  areNeighbours,\r\n  plotTrimmerFuncC,\r\n  plotTrimmerFuncG\r\n} from \"./aggregation-implementations\";\r\nimport {\r\n  ProvenanceNode,\r\n  isStateNode\r\n} from \"@visualstorytelling/provenance-core\";\r\nimport { IGroupedTreeNode } from \"../utils\";\r\n\r\n/**\r\n * @description Getter for the user intent of the node selected.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Node selected.\r\n * @returns Returns the Intent of the user for the node selected.\r\n */\r\nexport function getNodeIntent(node: ProvenanceNode): string {\r\n  if (\r\n    isStateNode(node) &&\r\n    node.action &&\r\n    node.action.metadata &&\r\n    node.action.metadata.userIntent\r\n  ) {\r\n    return node.action.metadata.userIntent;\r\n  }\r\n  return \"none\";\r\n}\r\n\r\nexport function getNodeRenderer(node: ProvenanceNode): string {\r\n  if (\r\n    isStateNode(node) &&\r\n    node.action &&\r\n    node.action.metadata &&\r\n    node.action.metadata.renderer\r\n  ) {\r\n    return node.action.metadata.renderer;\r\n  }\r\n  return \"none\";\r\n}\r\n\r\n/**\r\n * @description Test whether a node is a key node or not.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Node selected.\r\n */\r\nexport function isKeyNode(node: ProvenanceNode): boolean {\r\n  if (\r\n    !isStateNode(node) ||\r\n    node.children.length === 0 ||\r\n    node.children.length > 1 ||\r\n    node.parent.children.length > 1 ||\r\n    (node.children.length === 1 &&\r\n      getNodeIntent(node) !== getNodeIntent(node.children[0]))\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @description Returns a label for grouped nodes.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Node selected.\r\n */\r\nexport const groupNodeLabel = (node: IGroupedTreeNode<ProvenanceNode>) => {\r\n  if (node.wrappedNodes.length === 1) {\r\n    return node.wrappedNodes[0].label;\r\n  } \r\n  else {\r\n    const label_arr =node.wrappedNodes.map(n => n.label);\r\n    const unique_label_arr = new Set(label_arr);\r\n    if(unique_label_arr.size === 1)//all labels are the same\r\n      return node.wrappedNodes[0].label;\r\n    else{ // labels are different\r\n      let label = \"\";\r\n      const searchpattern = /Camera|View/;\r\n      const searchpattern_2 = /Object/;\r\n      const searchpattern_3 = /Annotation/;\r\n      const searchpattern_4 = /Measure/;\r\n      for (let u_label of unique_label_arr.values()) {\r\n        if(searchpattern.test(u_label) && label.search('Camera') === -1)\r\n          label = label + \"Camera,\";\r\n        else if(searchpattern_2.test(u_label) && label.search('Object') === -1)\r\n          label = label + \"Object,\";\r\n        else if(searchpattern_3.test(u_label) && label.search('Annotation') === -1)\r\n          label = label + \"Annotation,\";\r\n        else if(searchpattern_4.test(u_label) && label.search('Measure') === -1)\r\n          label = label + \"Measure,\";\r\n      }\r\n      label = label.slice(0, -1);\r\n      if(label.includes('Camera') && label.includes('Object') && node.wrappedNodes.length >= 3)\r\n        label = node.wrappedNodes[0].metadata.O_group;\r\n      if(label == 'Object')\r\n        label = label + \"(\" + node.wrappedNodes[0].metadata.O_group + \")\";\r\n        if(label == 'SelectObject')\r\n        label = label.slice(0,-6) + \"(\" + node.wrappedNodes[0].metadata.O_group + \")\";\r\n      if(label == 'Camera')\r\n        label = label + \"(\" + node.wrappedNodes[0].metadata.O_group + \")\";\r\n      return label;\r\n\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @description Wraps a node and its children recursively\r\n * in an extra IGroupedTreeNode; which can be manipulated for grouping etc,\r\n * without modifying the (provenance) node.\r\n * @param  node  {IGroupedTreeNode<ProvenanceNode>} - Node selected.\r\n */\r\nexport const wrapNode = (\r\n  node: ProvenanceNode\r\n): IGroupedTreeNode<ProvenanceNode> => {\r\n  const searchpattern = /Camera|View/;\r\n  if(searchpattern.test(node.label))\r\n    return {\r\n      wrappedNodes: [node],\r\n      children: node.children.map(wrapNode),\r\n      plotTrimmerValue: -1,\r\n      neighbour: false,\r\n      bookmarked: false,\r\n      camera: true\r\n    };\r\n  else\r\n    return {\r\n      wrappedNodes: [node],\r\n      children: node.children.map(wrapNode),\r\n      plotTrimmerValue: -1,\r\n      neighbour: false,\r\n      bookmarked: false,\r\n      camera: false\r\n    };\r\n};\r\n\r\n/**\r\n * @description Test placeholder.\r\n * @param a {IGroupedTreeNode<ProvenanceNode>} - Node #1 to be tested.\r\n * @param b {IGroupedTreeNode<ProvenanceNode>} - Node #2 to be tested.\r\n */\r\nexport const testNothing: NodeGroupTest<ProvenanceNode> = (\r\n  a: IGroupedTreeNode<ProvenanceNode>,\r\n  b: IGroupedTreeNode<ProvenanceNode>\r\n) => false;\r\n\r\n/**\r\n * @description Test if two nodes share the same userIntent.\r\n * @param a {IGroupedTreeNode<ProvenanceNode>} - Node #1 to be tested.\r\n * @param b {IGroupedTreeNode<ProvenanceNode>} - Node #2 to be tested.\r\n */\r\nexport const testUserIntent: NodeGroupTest<ProvenanceNode> = (\r\n  a: IGroupedTreeNode<ProvenanceNode>,\r\n  b: IGroupedTreeNode<ProvenanceNode>\r\n) => getNodeIntent(a.wrappedNodes[0]) === getNodeIntent(b.wrappedNodes[0]);\r\n\r\n/**\r\n * @description Test if b is an interval node.\r\n * @param a {IGroupedTreeNode<ProvenanceNode>} - Not used.\r\n * @param b {IGroupedTreeNode<ProvenanceNode>} - Node to be tested.\r\n */\r\nexport const testIsIntervalNode: NodeGroupTest<ProvenanceNode> = (\r\n  a: IGroupedTreeNode<ProvenanceNode>,\r\n  b: IGroupedTreeNode<ProvenanceNode>\r\n) => b.children.length === 1;\r\n\r\n/**\r\n * @description Test if a and b are neighbours.\r\n * @param a {IGroupedTreeNode<ProvenanceNode>} - Node #1 to be tested.\r\n * @param b {IGroupedTreeNode<ProvenanceNode>} - Node #2 to be tested.\r\n */\r\nexport const testNeighbours: NodeGroupTest<ProvenanceNode> = (\r\n  a: IGroupedTreeNode<ProvenanceNode>,\r\n  b: IGroupedTreeNode<ProvenanceNode>\r\n) => areNeighbours(a, b);\r\n\r\n//////// Objects that represent the different data aggregation algorithms///////////\r\n\r\n/**Default Option as Raw Data */\r\nexport const defaultData: NodeAggregator<ProvenanceNode> = {\r\n  name: \"Select Aggregation\",\r\n  tests: [testNothing],\r\n  algorithm: doNothing,\r\n  arg: false,\r\n  description: \"No algorithm is applied. The full provenance data is shown.\"\r\n};\r\n/**\r\n * @description Object of the interface DataAggregation<ProvenanceNode>.\r\n */\r\nexport const rawData: NodeAggregator<ProvenanceNode> = {\r\n  name: \"Raw data\",\r\n  tests: [testNothing],\r\n  algorithm: doNothing,\r\n  arg: false,\r\n  description: \"No algorithm is applied. The full provenance data is shown.\"\r\n};\r\n\r\n/**\r\n * @description Object of the interface DataAggregation<ProvenanceNode>.\r\n */\r\nexport const grouping: NodeAggregator<ProvenanceNode> = {\r\n  name: \"Grouping\",\r\n  tests: [testUserIntent, testIsIntervalNode],\r\n  algorithm: group,\r\n  arg: false,\r\n  description: `This algorithm groups nodes of the same category (color).\r\nThe remaining nodes represent the last interactions of category groups.\r\nThe grouped nodes must have connectivity equal to two or less (interval nodes or leaves) and must belong to the same category group.`\r\n};\r\n\r\n/**\r\n * @description Object of the interface DataAggregation<ProvenanceNode>.\r\n */\r\nexport const compression: NodeAggregator<ProvenanceNode> = {\r\n  name: \"Compression\",\r\n  tests: [testIsIntervalNode, testIsIntervalNode],\r\n  algorithm: compress,\r\n  arg: false,\r\n  description: `This algorithm groups nodes with connectivity equals to two (interval nodes). However,\r\nthe node which 'absorbs' the grouped nodes and which is still visualized can be of any connectivity\r\nThe remaining nodes are nodes with connectivity different to two (leaves or subroots).\r\nThe nodes are grouped regardless their category.`\r\n};\r\n\r\n/**\r\n * @description Object of the interface DataAggregation<ProvenanceNode>.\r\n */\r\nexport const pruning: NodeAggregator<ProvenanceNode> = {\r\n  name: \"Pruning\",\r\n  tests: [testIsIntervalNode],\r\n  algorithm: prune,\r\n  arg: true,\r\n  description: `This algorithm groups nodes with connectivity equals to two (interval nodes), regardless their category.\r\nA chosen parameter indicates the minimum height that a subtree must have to be shown.\r\nE.g., if the chosen parameter is two, the subtrees with height two or less than two will be grouped.\r\nThe grouped subtrees are represented by their subroot.\r\nThe main tree is not considered as a subtree.`\r\n};\r\n\r\n/**\r\n * @description Object of the interface DataAggregation<ProvenanceNode>.\r\n */\r\nexport const plotTrimmer: NodeAggregator<ProvenanceNode> = {\r\n  name: \"PlotTrimmer\",\r\n  tests: [testIsIntervalNode],\r\n  algorithm: plotTrimmerFunc,\r\n  arg: true,\r\n  description: \"Lorem Ipsum\"\r\n};\r\n\r\n/**\r\n * @description Object of the interface DataAggregation<ProvenanceNode>.\r\n */\r\nexport const plotTrimmerC: NodeAggregator<ProvenanceNode> = {\r\n  name: \"PlotTrimmer C\",\r\n  tests: [testIsIntervalNode],\r\n  algorithm: plotTrimmerFuncC,\r\n  arg: true,\r\n  description: \"Lorem Ipsum\"\r\n};\r\n\r\n/**\r\n * @description Object of the interface DataAggregation<ProvenanceNode>.\r\n */\r\nexport const plotTrimmerG: NodeAggregator<ProvenanceNode> = {\r\n  name: \"PlotTrimmer G\",\r\n  tests: [testIsIntervalNode],\r\n  algorithm: plotTrimmerFuncG,\r\n  arg: true,\r\n  description: \"Lorem Ipsum\"\r\n};\r\n\r\n/**\r\n * @description List of the data aggregation objects. Whenever you want to add a\r\n * new data aggregation algorithm: create object and add it to this list.\r\n */\r\n\r\nexport const aggregationObjects = [\r\n  defaultData,\r\n  rawData,\r\n  grouping,\r\n  compression,\r\n  pruning,\r\n  plotTrimmer,\r\n  plotTrimmerC,\r\n  plotTrimmerG\r\n];\r\n\r\nexport const aggregationObjectsUI1 = [\r\n  defaultData,\r\n  rawData,\r\n  plotTrimmerG\r\n];\r\nexport const aggregationObjectsUI2 = [\r\n  defaultData,\r\n  rawData,\r\n  plotTrimmerC\r\n];","const legendData = {\r\n  legends: [\r\n    {\r\n      name: 'Camera',\r\n      color: '#8dd3c7',\r\n      shape: 'circle',\r\n      stroke: '#000000'    \r\n    },\r\n    {\r\n      name: 'Object Trans',\r\n      color: '#80b1d3',\r\n      shape: 'circle',\r\n      stroke: '#000000'\r\n    },\r\n    {\r\n      name: 'Object Selection',\r\n      color: '#fdb462',\r\n      shape: 'circle',\r\n      stroke: '#000000'    \r\n    },\r\n    {\r\n      name: 'Story Node',\r\n      color: '#f9f9f9',\r\n      shape: 'circle',\r\n      stroke: '#ff0000'\r\n    },\r\n    {\r\n      name: 'Measurement',\r\n      color: '#bebada',\r\n      shape: 'circle',\r\n      stroke: '#000000'\r\n    },\r\n  ],\r\n  commands: [\r\n    'HOW TO PERFORM SOME INTERACTIONS:',\r\n    '- RIGHT-CLICK+DRAGGING on imaging data = Zoom the imaging data',\r\n    '- SHIFT+CLICK on imaging data = Magnify a view', \r\n    '- ALT+RIGHT CLICK on measurements = Delete a measurement',\r\n    '- RIGHT CLICK on graph nodes = Bookmark a node and to add one slide representing the current state to the storyline',\r\n    '- SCROLLING on graph = Zoom the graph',\r\n    '- SHIFT+SCROLLING on storyline = Scale the graph',\r\n    '- SHIFT+DRAGGING on text box = Move the text box',\r\n    '- SCROLLING on storyline = Slide the graph'\r\n  ],\r\n  tasks: [\r\n    'TASKS TO BE PERFORMED:',\r\n    '- TASK 1 = Explore the imaging data to find all nodules/anomalies in it.',\r\n    '- TASK 2 = Measure the diameter of all the nodules/anomalies found in the imaging data.', \r\n    '- TASK 3 = Create annotations and/or make additional measurements on the nodules/anomalies found in the imaging data.',\r\n    '- TASK 4 = Create a text report and a visual data story to communicate your findings to collaborators.'\r\n  ]\r\n};\r\n\r\nexport function addLegend(elm: any) {\r\n  const legendContainer = elm\r\n    .append('div')\r\n    .attr('class', 'legend')\r\n    .attr('id', 'legendContainer')\r\n    .style('position', 'absolute')\r\n    .style('z-index', '1')\r\n    .style('bottom', '1%')\r\n    .style('right', '1%')\r\n    .style('display', 'none');\r\n\r\n  const containerWidth = window.innerWidth * 0.2;\r\n  const legendWidth = containerWidth * 0.8;\r\n\r\n  const legendBox = legendContainer\r\n    .append('div')\r\n    .attr('class', 'legend-box')\r\n    .style('background-color', '#f9f9f9')\r\n    .style('border', '1px solid #ddd')\r\n    .style('padding', '10px')\r\n    .style('border-radius', '4px')\r\n    .style('width', `${legendWidth}px`)\r\n    .style('min-height', '60px');\r\n\r\n  const legendList = legendBox.append('ul');\r\n\r\n  const listItem = legendList\r\n    .selectAll('li')\r\n    .data(legendData.legends)\r\n    .enter()\r\n    .append('li')\r\n    .style('list-style-type', 'none')\r\n    .style('margin-bottom', '5px')\r\n    .style('display', 'flex')\r\n    .style('align-items', 'center');\r\n\r\n  const legendSvg = listItem\r\n    .append('svg')\r\n    .attr('width', 12)\r\n    .attr('height', 12);\r\n\r\n  legendSvg.append('circle')\r\n    .attr('cx', 6)\r\n    .attr('cy', 6)\r\n    .attr('r', 6)\r\n    .style('fill', (d: any) => d.color)\r\n    .style('stroke', (d: any) => d.stroke || '#000000')\r\n    .style('stroke-width', '1px');\r\n\r\n  listItem\r\n    .append('span')\r\n    .style('margin-left', '5px')\r\n    .text((d: any) => d.name);\r\n}\r\n// export function addCommandsList(elm: any) {\r\n//   const commandsContainer = elm.append('div').attr('class', 'legend')\r\n//     .attr('id', 'commandsContainer').attr('style', 'margin-bottom: 15%; display: none;');\r\n//   const commandsList = commandsContainer.append('ul');\r\n//   const commandsListItem = commandsList\r\n//     .selectAll('li')\r\n//     .data(legendData.commands)\r\n//     .enter()\r\n//     .append('li');\r\n//   commandsListItem\r\n//     .append('div')\r\n\r\n//   commandsListItem.append('span').text((d: any) => {\r\n//     return d;\r\n//   });\r\n// }\r\n// export function addTasksList(elm: any) {\r\n// const tasksContainer = elm.append('div').attr('class', 'legend')\r\n//       .attr('id', 'tasksContainer').attr('style', 'margin-bottom: 15%; display: none;');\r\n//     const tasksList = tasksContainer.append('ul');\r\n//     const tasksListItem = tasksList\r\n//       .selectAll('li')\r\n//       .data(legendData.tasks)\r\n//       .enter()\r\n//       .append('li');\r\n//       tasksListItem\r\n//       .append('div')\r\n//     tasksListItem.append('span').text((d: any) => {\r\n//       return d;\r\n//     });\r\n//   }","import * as d3 from 'd3';\r\nimport { ProvenanceTreeVisualization } from './provenance-tree-visualization';\r\nimport { addLegend} from './legend';\r\nimport { StateNode } from '@visualstorytelling/provenance-core';\r\n\r\n/**\r\n * @description Show the title of the data aggregation algorithm used.\r\n */\r\nexport type HTMLDivSelection = d3.Selection<\r\n  HTMLDivElement,\r\n  unknown,\r\n  null,\r\n  undefined\r\n>;\r\nexport function setTitle(elm: HTMLDivSelection, onClick: () => any) {\r\n  elm\r\n    .append('div')\r\n    .attr('id', 'DataAggregationTitle')\r\n    .attr('style', 'text-align: center;')\r\n    .append('text')\r\n    .attr('class', 'titleAggregation')\r\n    .attr('id', 'DataAggregation')\r\n    .text('Raw Data')\r\n    .on('click', onClick)\r\n    .attr('style', 'cursor:pointer');\r\n}\r\n\r\n/**\r\n * @description Show the buttons of the user interface.\r\n */\r\nexport function addAggregationButtons(\r\n  elm: HTMLDivSelection,\r\n  provenanceTreeVisualization: ProvenanceTreeVisualization\r\n) {\r\n  const container = elm.append('div').attr('class', 'container');\r\n\r\n  // const holder = provenanceTreeVisualization.container\r\n  //   .append(\"div\")\r\n  //   .attr(\"class\", \"holder\")\r\n  //   .attr(\"id\", \"groupingContainer\")\r\n  //   .attr(\"style\", \"position: absolute; bottom: 25%; display:none;\");\r\n\r\n  let processing = false; // Lock\r\n  const goToTheRootButton = provenanceTreeVisualization.container\r\n    .append('button')\r\n    .attr('id', 'root-trigger')\r\n    .attr('class', 'mat-icon-button mat-button-base mat-primary')\r\n    .attr('color', 'primary')\r\n    .attr('title', 'Show the full provenance tree')\r\n    .attr('style', 'position: absolute; z-index: 1; top: 2%;')\r\n    .attr('ng-reflect-color', 'primary')\r\n    .on('mousedown', () => {\r\n      if (provenanceTreeVisualization.traverser.graph.root) {\r\n        provenanceTreeVisualization.getFullsizeview();\r\n      }\r\n    });\r\n\r\n  goToTheRootButton\r\n    .append('span')\r\n    .attr('class', 'mat-button-wrapper')\r\n    .append('mat-icon')\r\n    .attr('class', 'mat-icon notranslate material-icons mat-icon-no-color')\r\n    .attr('role', 'img')\r\n    .attr('aria-hidden', 'true')\r\n    .text('radio_button_unchecked');\r\n\r\n  goToTheRootButton\r\n    .append('div')\r\n    .attr('class', 'mat-button-ripple mat-ripple mat-button-ripple-round')\r\n    .attr('ng-reflect-centered', 'true')\r\n    .attr('ng-reflect-disabled', 'false')\r\n    .attr('ng-reflect-trigger', '[object HTMLButtonElement]');\r\n\r\n  goToTheRootButton\r\n    .append('div')\r\n    .attr('class', 'mat-button-focus-overlay');\r\n\r\n\r\n\r\nconst upwardButton = provenanceTreeVisualization.container\r\n  .append('button')\r\n  .attr('id', 'upward-trigger')\r\n  .attr('title', 'Move Up One Node')\r\n  .attr('class', 'mat-icon-button mat-button-base mat-primary')\r\n  .attr('color', 'primary')\r\n  .attr('style', 'position: absolute; z-index: 1; top: 7%;')\r\n  .attr('ng-reflect-color', 'primary')\r\n  .on('mousedown', () => {\r\n    var real_traverser = provenanceTreeVisualization.real_traverser;\r\n    var parent_id = '';\r\n    processing = true;\r\n    real_traverser\r\n    .filter((d: any) => {\r\n      const ref = d.data.wrappedNodes.includes(provenanceTreeVisualization.traverser.graph.current);\r\n      if(ref){\r\n        parent_id = d.parent.data.wrappedNodes[0].id;\r\n      }\r\n    });\r\n    if(provenanceTreeVisualization.groupnumber == 0){\r\n      setTimeout(() => {\r\n        provenanceTreeVisualization.traverser.toStateNode(parent_id, 250);\r\n        processing = false;\r\n    }, 300);\r\n    }\r\n\r\n    else\r\n      provenanceTreeVisualization.traverser.toStateNode(parent_id, 0);\r\n    provenanceTreeVisualization.getFullsizeview();\r\n    provenanceTreeVisualization.update();\r\n  });\r\n\r\nupwardButton\r\n  .append('span')\r\n  .attr('class', 'mat-button-wrapper')\r\n  .append('mat-icon')\r\n  .attr('class', 'mat-icon notranslate material-icons mat-icon-no-color')\r\n  .attr('role', 'img')\r\n  .attr('aria-hidden', 'true')\r\n  .text('arrow_upward');\r\n\r\nupwardButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-ripple mat-ripple mat-button-ripple-round')\r\n  .attr('ng-reflect-centered', 'true')\r\n  .attr('ng-reflect-disabled', 'false')\r\n  .attr('ng-reflect-trigger', '[object HTMLButtonElement]');\r\n\r\nupwardButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-focus-overlay');\r\n\r\nconst downwardButton = provenanceTreeVisualization.container\r\n  .append('button')\r\n  .attr('id', 'downward-trigger')\r\n  .attr('title', 'Move Down One Node')\r\n  .attr('class', 'mat-icon-button mat-button-base mat-primary')\r\n  .attr('color', 'primary')\r\n  .attr('style', 'position: absolute; z-index: 1; top: 12%;')\r\n  .attr('ng-reflect-color', 'primary')\r\n  .on('mousedown', () => {\r\n    var real_traverser = provenanceTreeVisualization.real_traverser;\r\n    var child_id = '';\r\n    processing = true;\r\n    real_traverser\r\n    .filter((d: any) => {\r\n      const ref = d.data.wrappedNodes.includes(provenanceTreeVisualization.traverser.graph.current);\r\n      if(ref){\r\n        for(const child of d.children)\r\n        {\r\n            if(child.data.wrappedNodes[0].metadata.mainbranch)\r\n                child_id = child.data.wrappedNodes[0].id;\r\n        }\r\n            \r\n      }\r\n    });\r\n    if(provenanceTreeVisualization.groupnumber == 0){\r\n      provenanceTreeVisualization.traverser.toStateNode(child_id, 250);\r\n      setTimeout(() => {\r\n        processing = false;\r\n    }, 300);\r\n    }\r\n\r\n    else\r\n      provenanceTreeVisualization.traverser.toStateNode(child_id, 0);\r\n    provenanceTreeVisualization.getFullsizeview();\r\n    provenanceTreeVisualization.update();\r\n  });\r\n\r\ndownwardButton\r\n  .append('span')\r\n  .attr('class', 'mat-button-wrapper')\r\n  .append('mat-icon')\r\n  .attr('class', 'mat-icon notranslate material-icons mat-icon-no-color')\r\n  .attr('role', 'img')\r\n  .attr('aria-hidden', 'true')\r\n  .text('arrow_downward');\r\n\r\ndownwardButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-ripple mat-ripple mat-button-ripple-round')\r\n  .attr('ng-reflect-centered', 'true')\r\n  .attr('ng-reflect-disabled', 'false')\r\n  .attr('ng-reflect-trigger', '[object HTMLButtonElement]');\r\n\r\ndownwardButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-focus-overlay');\r\n\r\n\r\nconst slider = provenanceTreeVisualization.container\r\n  .append('mat-slider')\r\n  .attr('id', 'group_slider')\r\n  .attr('max', provenanceTreeVisualization.numberofnodes)\r\n  .attr('min', 0)\r\n  .attr('step', 1)\r\n  .attr('thumbLabel', true)\r\n  .attr('style', 'position: absolute; z-index: 1; top: 27%;left: 5%;')\r\n  .attr('tickInterval', 5)\r\n  .attr('vertical', true)\r\n  .style('height', '300px')\r\n  .attr('matTooltip', 'Provenance-Grouping Slider');\r\n\r\nslider.append('mat-slider-thumb');\r\nslider.append('mat-slider-track-fill');\r\nslider.append('mat-slider-track-background');  \r\n\r\n\r\nconst HidecameraButton = provenanceTreeVisualization.container\r\n.append('button')\r\n.attr('id', 'camera-trigger')\r\n.attr('class', 'mat-icon-button mat-button-base mat-primary')\r\n.attr('color', 'primary')\r\n.attr('style', 'position: absolute; z-index: 1; top: 17%;')\r\n.attr('ng-reflect-color', 'primary')\r\n.attr('title', 'Hide/Show Camera Actions')\r\n.on('mousedown', () => {\r\n  if (provenanceTreeVisualization.traverser.graph.root) {\r\n    provenanceTreeVisualization.camerahide();\r\n  }\r\n});\r\n\r\nHidecameraButton\r\n  .append('span')\r\n  .attr('class', 'mat-button-wrapper')\r\n  .append('mat-icon')\r\n  .attr('class', 'mat-icon notranslate material-icons mat-icon-no-color')\r\n  .attr('role', 'img')\r\n  .attr('aria-hidden', 'true')\r\n  .text('camera_alt');\r\n\r\nHidecameraButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-ripple mat-ripple mat-button-ripple-round')\r\n  .attr('ng-reflect-centered', 'true')\r\n  .attr('ng-reflect-disabled', 'false')\r\n  .attr('ng-reflect-trigger', '[object HTMLButtonElement]');\r\n\r\nHidecameraButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-focus-overlay');\r\n\r\n\r\n  const DeleteNodeButton = provenanceTreeVisualization.container\r\n  .append('button')\r\n  .attr('id', 'delete-trigger')\r\n  .attr('class', 'mat-icon-button mat-button-base mat-primary')\r\n  .attr('color', 'primary')\r\n  .attr('style', 'position: absolute; z-index: 1; top: 22%;')\r\n  .attr('ng-reflect-color', 'primary')\r\n  .attr('title', 'Delete Node(s)')\r\n  .attr('disabled', provenanceTreeVisualization.groupnumber >= 1 ? 'disabled' : null) // Add the disabled attribute conditionally\r\n  .on('mousedown', () => {\r\n    var real_traverser = provenanceTreeVisualization.real_traverser;\r\n    real_traverser\r\n      .filter((d: any) => {\r\n        const ref = d.data.wrappedNodes.includes(provenanceTreeVisualization.traverser.graph.current);\r\n        if (ref) {\r\n          if (d.data.wrappedNodes.length == 1)\r\n            provenanceTreeVisualization.deleteNode();\r\n        }\r\n      });\r\n  });\r\n\r\nconst buttonWrapper = DeleteNodeButton\r\n  .append('span')\r\n  .attr('class', 'mat-button-wrapper');\r\n\r\nbuttonWrapper\r\n  .append('mat-icon')\r\n  .attr('class', 'mat-icon notranslate material-icons mat-icon-no-color')\r\n  .attr('role', 'img')\r\n  .attr('aria-hidden', 'true')\r\n  .text('delete_forever');\r\n\r\nbuttonWrapper\r\n  .append('div')\r\n  .attr('class', 'mat-button-ripple mat-ripple mat-button-ripple-round')\r\n  .attr('ng-reflect-centered', 'true')\r\n  .attr('ng-reflect-disabled', 'false')\r\n  .attr('ng-reflect-trigger', '[object HTMLButtonElement]');\r\n\r\nbuttonWrapper\r\n  .append('div')\r\n  .attr('class', 'mat-button-focus-overlay');\r\n\r\n// Add CSS class to the button and icon when disabled\r\nDeleteNodeButton.classed('disabled', provenanceTreeVisualization.groupnumber >= 1);\r\nDeleteNodeButton.select('.mat-icon').classed('disabled', provenanceTreeVisualization.groupnumber >= 1);\r\n// Add a window resize event listener\r\nwindow.addEventListener('resize', () => {\r\n  // Get the container element where the legend will be appended\r\n  const container = d3.select('#legendContainer');\r\n\r\n  // Remove the existing legend if it exists\r\n  container.remove();\r\n\r\n  // Call the addLegend function to recreate the legend with updated dimensions\r\n  addLegend(provenanceTreeVisualization.container);\r\n});\r\naddLegend(provenanceTreeVisualization.container);\r\nconst HelpButton = provenanceTreeVisualization.container\r\n.append('button')\r\n.attr('id', 'help_trigger')\r\n.attr('class', 'mat-icon-button mat-button-base mat-primary')\r\n.attr('color', 'primary')\r\n.attr('style', 'position: absolute; z-index: 10; Bottom: 0.7%; Right: 1.0%;')\r\n.attr('ng-reflect-color', 'primary')\r\n.attr('title', 'Graph color legend')\r\n.on('mousedown', () => {\r\n  const legendContainer = d3.select(\"#legendContainer\");\r\n  const isVisible = legendContainer.style(\"display\") === \"none\";\r\n  legendContainer.style(\"display\", isVisible ? \"Block\" : \"none\");\r\n});\r\n\r\nHelpButton\r\n  .append('span')\r\n  .attr('class', 'mat-button-wrapper')\r\n  .append('mat-icon')\r\n  .attr('class', 'mat-icon notranslate material-icons mat-icon-no-color')\r\n  .attr('role', 'img')\r\n  .attr('aria-hidden', 'true')\r\n  .text('help_outline');\r\n\r\nHelpButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-ripple mat-ripple mat-button-ripple-round')\r\n  .attr('ng-reflect-centered', 'true')\r\n  .attr('ng-reflect-disabled', 'false')\r\n  .attr('ng-reflect-trigger', '[object HTMLButtonElement]');\r\n\r\nHelpButton\r\n  .append('div')\r\n  .attr('class', 'mat-button-focus-overlay');\r\n\r\n}\r\n","import { HierarchyNode, HierarchyPointNode } from \"d3-hierarchy\";\r\n\r\nfunction depthSort(\r\n  a: IHierarchyPointNodeWithMaxDepth<any>,\r\n  b: IHierarchyPointNodeWithMaxDepth<any>\r\n) {\r\n  if (a.maxDescendantDepth > b.maxDescendantDepth) {\r\n    return -1;\r\n  } else if (a.maxDescendantDepth < b.maxDescendantDepth) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nexport interface IGratzlLayout<Datum> {\r\n  (\r\n    root: HierarchyNode<Datum>,\r\n    activeNode: HierarchyNode<Datum>\r\n  ): IHierarchyPointNodeWithMaxDepth<Datum>;\r\n  size(): [number, number];\r\n  size(size: [number, number]): this;\r\n}\r\n\r\nexport interface IHierarchyPointNodeWithMaxDepth<Datum>\r\n  extends HierarchyPointNode<Datum> {\r\n  maxDescendantDepth: number;\r\n  xOffset: number;\r\n}\r\n\r\nexport default function GratzlLayoutOld<Datum>() {\r\n  let dx = 5;\r\n  let dy = 50;\r\n  const widths: number[] = [];\r\n\r\n  function setTreeX(node: IHierarchyPointNodeWithMaxDepth<Datum>, val: number) {\r\n    node.xOffset = val;\r\n    widths[node.depth] = val;\r\n    if (node.children) {\r\n      node\r\n        .leaves()\r\n        .sort(depthSort)\r\n        .forEach(leaf => {\r\n          if (typeof leaf.xOffset === \"undefined\") {\r\n            const width = Math.max.apply(\r\n              null,\r\n              widths.slice(node.depth, leaf.depth + 1)\r\n            );\r\n            setTreeX(leaf, val > width ? val : width + 1);\r\n          }\r\n        });\r\n    }\r\n\r\n    if (node.parent && typeof node.parent.xOffset === \"undefined\") {\r\n      setTreeX(node.parent, val);\r\n    }\r\n  }\r\n\r\n  const tree: IGratzlLayout<Datum> = Object.assign(\r\n    (_root: HierarchyNode<Datum>, _activeNode: HierarchyNode<Datum>) => {\r\n      /*\r\n       * set maxDescendantDepth on each node,\r\n       * which is the depth of its deepest child\r\n       *\r\n       * */\r\n\r\n      const root = _root as IHierarchyPointNodeWithMaxDepth<Datum>;\r\n      const activeNode = _activeNode as IHierarchyPointNodeWithMaxDepth<Datum>;\r\n\r\n      root.leaves().forEach(leaf => {\r\n        leaf.ancestors().forEach(leafAncestor => {\r\n          if (\r\n            !leafAncestor.maxDescendantDepth ||\r\n            leaf.depth > leafAncestor.maxDescendantDepth\r\n          ) {\r\n            leafAncestor.maxDescendantDepth = leaf.depth;\r\n          }\r\n        });\r\n      });\r\n\r\n      /* rendering should start at the deepest leaf of activeNode. */\r\n      let deepestLeaf = activeNode;\r\n      activeNode.leaves().forEach(leaf => {\r\n        if (deepestLeaf.depth < leaf.depth) {\r\n          deepestLeaf = leaf;\r\n        }\r\n      });\r\n\r\n      setTreeX(deepestLeaf, 0);\r\n\r\n      const maxX = Math.max.apply(null, widths);\r\n      const maxY = Math.max.apply(null, root.leaves().map(leaf => leaf.depth));\r\n      root.each(node => {\r\n        sizeNode(node, maxX, maxY);\r\n      });\r\n\r\n      return root;\r\n    },\r\n    {\r\n      size: ((x: [number, number] | undefined) => {\r\n        return x ? ((dx = +x[0]), (dy = +x[1]), tree) : [dx, dy];\r\n      }) as any\r\n    }\r\n  );\r\n\r\n  function sizeNode(\r\n    node: IHierarchyPointNodeWithMaxDepth<any>,\r\n    maxX: number,\r\n    maxY: number\r\n  ): void {\r\n    node.x = maxX === 0 ? dx : dx - (dx / maxX) * node.xOffset;\r\n    node.y = maxY === 0 ? dy : (dy / maxY) * node.depth;\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { getNodeIntent, isKeyNode } from \"./aggregation/aggregation-objects\";\r\nimport { IHierarchyPointNodeWithMaxDepth } from \"./gratzl\";\r\nimport GratzlLayoutOld from \"./gratzl_old\";\r\nimport { IGroupedTreeNode } from \"./utils\";\r\nimport { ProvenanceNode } from \"@visualstorytelling/provenance-core\";\r\nimport { HierarchyPointLink } from \"d3-hierarchy\";\r\nimport { ProvenanceTreeVisualization } from \"./provenance-tree-visualization\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport function caterpillar(\r\n  updateNodes: d3.Selection<\r\n    any,\r\n    IHierarchyPointNodeWithMaxDepth<IGroupedTreeNode<ProvenanceNode>>,\r\n    any,\r\n    any\r\n  >,\r\n  treeNodes: IHierarchyPointNodeWithMaxDepth<\r\n    IGroupedTreeNode<ProvenanceNode>\r\n  >[],\r\n  updatedLinks: d3.Selection<\r\n    any,\r\n    HierarchyPointLink<IGroupedTreeNode<ProvenanceNode>>,\r\n    any,\r\n    any\r\n  >,\r\n  provenanceTreeVisualization: ProvenanceTreeVisualization\r\n) {\r\n  if (provenanceTreeVisualization.caterpillarActivated) {\r\n    const mainNodes = updateNodes.filter((d: any) => d.x === 0);\r\n    const mainNodesData = mainNodes\r\n      .data()\r\n      .map((d: any) => d.data.wrappedNodes[0].id);\r\n\r\n    // console.log(mainNodesData);\r\n\r\n    const edgeNodes = mainNodes.filter((d: any) => {\r\n      if (d.children) {\r\n        return d.children.length > 1;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    edgeNodes.select(\"circle\").attr(\"class\", \"intent_wrapped\");\r\n    edgeNodes.select(\"rect\").attr(\"class\", \"intent_wrapped\");\r\n\r\n    // Hide the rest of the circles and links\r\n    updateNodes.filter((d: any) => d.x !== 0).attr(\"class\", \"node hiddenClass\");\r\n\r\n    updatedLinks\r\n      .filter((d: any) => d.target.x !== 0)\r\n      .attr(\"class\", \"node hiddenClass\");\r\n\r\n    // Set the label which indicate the number of nodes wrapped\r\n    updateNodes\r\n      .select(\"text.circle-text\")\r\n      .filter((d: any) => d.x !== 0)\r\n      .attr(\"visibility\", \"visible\");\r\n\r\n    edgeNodes\r\n      .select(\".normal>text.circle-text\")\r\n      .attr(\"visibility\", \"visible\")\r\n      .text((d: any) => {\r\n        const copyNode = d.copy();\r\n        copyNode.children = copyNode.children.filter(\r\n          (e: any, i: any, arr: any) =>\r\n            !mainNodesData.includes(e.data.wrappedNodes[0].id)\r\n        );\r\n        return copyNode.descendants().length;\r\n      })\r\n      .attr(\"x\", (d: any) => {\r\n        const copyNode = d.copy();\r\n        copyNode.children = copyNode.children.filter(\r\n          (e: any, i: any, arr: any) =>\r\n            !mainNodesData.includes(e.data.wrappedNodes[0].id)\r\n        );\r\n        if (copyNode.descendants().length < 10) {\r\n          return -1.5;\r\n        } else {\r\n          return -3;\r\n        }\r\n      });\r\n\r\n    // Set the radius of the circle\r\n    edgeNodes.select(\"circle\").attr(\"r\", (d: any) => {\r\n      return Math.min(4 + 0.15 * d.descendants().length, 6);\r\n    });\r\n\r\n    // Set the click function\r\n    edgeNodes.on(\"click\", (d: any) => {\r\n      const actualCatGraph = d3.selectAll(\".classCat\");\r\n\r\n      // When click again -> auxiliar tree disappearss.\r\n      if (\r\n        actualCatGraph\r\n          .data()\r\n          .map((k: any) => k.data.wrappedNodes[0].id)\r\n          .includes(d.data.wrappedNodes[0].id)\r\n      ) {\r\n        actualCatGraph\r\n          .data([])\r\n          .exit()\r\n          .remove();\r\n        d3.selectAll(\"path.linkCat\")\r\n          .data([])\r\n          .exit()\r\n          .remove();\r\n        // console.log(\r\n        //   actualCatGraph.data().map((k: any) => k.data.wrappedNodes[0].id)\r\n        // );\r\n        // console.log(d.data.wrappedNodes[0].id);\r\n      } else {\r\n        // else -> deploy the new tree.\r\n        const treeCopy = d.copy();\r\n        treeCopy.children = treeCopy.children.filter(\r\n          (e: any, i: any, arr: any) =>\r\n            !mainNodesData.includes(e.data.wrappedNodes[0].id)\r\n        );\r\n        const treeLayoutCat = GratzlLayoutOld<\r\n          IGroupedTreeNode<ProvenanceNode>\r\n        >().size([35, 120]);\r\n        const treeCat = treeLayoutCat(treeCopy, treeCopy);\r\n\r\n        const excatNodes = provenanceTreeVisualization.g\r\n          .selectAll(\"g.classCat\")\r\n          .data(treeCat.descendants(), (datum: any) =>\r\n            datum.data.wrappedNodes.map((n: any) => n.id).join()\r\n          );\r\n        excatNodes.exit().remove();\r\n\r\n        const catNodes = excatNodes\r\n          .enter()\r\n          .append(\"g\")\r\n          .attr(\"class\", \"classCat node branch-active \")\r\n          .data(treeNodes)\r\n          .attr(\"transform\", (datum: any) =>\r\n            datum.data.wrappedNodes[0].metadata.isSlideAdded\r\n              ? `translate(${d.x - 3}, ${d.y})`\r\n              : `translate(${d.x}, ${d.y})`\r\n          );\r\n        // .append('g')\r\n        // .attr('class', 'classCat node branch-active ')\r\n        // .attr('transform', (k: any) => `translate(${k.x}, ${k.y})`);\r\n\r\n        catNodes.append(\"circle\").attr(\"r\", 3);\r\n\r\n        // Fix the radius of the circles according to #nodes wrapped\r\n        catNodes.select(\"circle\").attr(\"r\", (datum: any) => {\r\n          let radius = 2;\r\n          if (datum.data.neighbour === true) {\r\n            radius = 3;\r\n          }\r\n          if (datum.data.wrappedNodes.length !== 1) {\r\n            radius = Math.min(4 + 0.15 * datum.data.wrappedNodes.length, 6);\r\n          }\r\n          return radius;\r\n        });\r\n\r\n        // Assign classes to the circles\r\n        catNodes.select(\"circle\").attr(\"class\", (datum: any) => {\r\n          let classString = \"\";\r\n          console.log(d.data.wrappedNodes[0].metadata);\r\n          if (d.data.wrappedNodes[0].metadata.bookmarked === true) {\r\n            classString += ' bookmarked';\r\n          }\r\n          if (isKeyNode(datum.data.wrappedNodes[0])) {\r\n            classString += \" keynode\";\r\n          }\r\n          classString += \" intent_\" + getNodeIntent(d.data.wrappedNodes[0]);\r\n\r\n          return classString;\r\n        });\r\n\r\n        catNodes.on(\"click\", datum =>\r\n          provenanceTreeVisualization.traverser.toStateNode(\r\n            datum.data.wrappedNodes[0].id,\r\n            250\r\n          )\r\n        );\r\n\r\n        // Set the #nodes-wrapped label\r\n        catNodes\r\n          .append(\"text\")\r\n          .attr(\"class\", \"circle-text\")\r\n          .attr(\"visibility\", (datum: any) => {\r\n            if (datum.data.wrappedNodes.length === 1) {\r\n              return \"hidden\";\r\n            } else {\r\n              return \"visible\";\r\n            }\r\n          })\r\n          .attr(\"x\", (datum: any) => {\r\n            if (datum.data.wrappedNodes.length >= 10) {\r\n              return -3;\r\n            }\r\n            return -1.5;\r\n          })\r\n          .attr(\"y\", 2)\r\n          .text((datum: any) => datum.data.wrappedNodes.length.toString());\r\n\r\n        // Set the links between circles\r\n        const oldLinksCat = provenanceTreeVisualization.g\r\n          .selectAll(\"path.linkCat\")\r\n          .data(treeCat.links(), (datum: any) =>\r\n            datum.target.data.wrappedNodes.map((n: any) => n.id).join()\r\n          );\r\n\r\n        oldLinksCat.exit().remove();\r\n\r\n        const newLinksCat = oldLinksCat\r\n          .enter()\r\n          .insert(\"path\", \"g\")\r\n          .attr(\"d\", provenanceTreeVisualization.linkPath as any);\r\n        oldLinksCat\r\n          .merge(newLinksCat as any)\r\n          .attr(\"class\", \"link linkCat\")\r\n          .filter((datum: any) => datum.target.x === 0)\r\n          .attr(\"class\", \"link active linkCat\");\r\n      } // end else actualgraph\r\n    }); // end on click\r\n  } // if of caterpillar procedure\r\n}\r\n","import * as d3 from 'd3';\r\nimport { HierarchyPointNode } from 'd3';\r\nimport { ProvenanceGraphTraverser, ProvenanceNode } from '@visualstorytelling/provenance-core';\r\n\r\nimport gratzl from './gratzl';\r\nimport { provGraphControls } from './controls';\r\nimport { IHierarchyPointNodeWithMaxDepth } from './gratzl';\r\nimport { IGroupedTreeNode,cam_test } from './utils';\r\nimport { NodeAggregator, transferToParent, transferChildren, transferChildren_2 } from './aggregation/aggregation-implementations';\r\nimport {\r\n  getNodeIntent,\r\n  getNodeRenderer,\r\n  groupNodeLabel,\r\n  isKeyNode,\r\n  rawData,\r\n  wrapNode,\r\n  plotTrimmerC,\r\n  plotTrimmerG\r\n} from './aggregation/aggregation-objects';\r\nimport { addAggregationButtons } from './components';\r\nimport { findHierarchyNodeFromProvenanceNode } from './aggregation/aggregation';\r\nimport { caterpillar } from './caterpillar';\r\n\r\nvar xScale = -20;\r\nvar yScale = 20;\r\nvar treeWidth = 0;\r\nvar maxtreeWidth = 10;\r\nvar p = 3;\r\nconst fontSize = 8;\r\n\r\nexport type D3SVGSelection = d3.Selection<SVGSVGElement, any, null, undefined>;\r\nexport type D3SVGGSelection = d3.Selection<SVGGElement, any, null, undefined>;\r\n\r\ndeclare const event: any;\r\n\r\nexport interface IAggregation {\r\n  aggregator: NodeAggregator<ProvenanceNode>;\r\n  arg: any;\r\n}\r\n\r\n/**\r\n * @description Class used to create and manage a provenance tree visualization.\r\n * @param traverser {ProvenanceGraphTraverser} - To manage the data structure of the graph.\r\n * @param svg {D3SVGSelection} - To manage the graphics of the tree.\r\n * @param _dataAggregation {aggregator<ProvenanceNode>} - Data aggregation in use.\r\n * @param caterpillarActivated {boolean} - True if this feature is enable.\r\n */\r\nexport class ProvenanceTreeVisualization {\r\n  public traverser: ProvenanceGraphTraverser;\r\n  public camera_show: boolean = true;\r\n  public colorScheme: any;\r\n  public numberofnodes: number = 1;\r\n  public numberofnodeswocam : number = 0;\r\n  public numberofnodeswcam: number = 0;\r\n  public numberOfUniqueValues: number = 1;\r\n  public groupnumber: number = 0;\r\n  public real_traverser: any;\r\n  public g: D3SVGGSelection;\r\n  public svg: D3SVGSelection;\r\n  public container: any;\r\n  public aggregation: IAggregation = {\r\n    aggregator: rawData,\r\n    arg: 1\r\n  };\r\n  public caterpillarActivated = false;\r\n  public alt = true;\r\n\r\n\r\n  private hierarchyRoot:\r\n    | IHierarchyPointNodeWithMaxDepth<IGroupedTreeNode<ProvenanceNode>>\r\n    | undefined;\r\n\r\n  private zoomer: any;\r\n  private currentHierarchyNodelength: any = 0;\r\n  private currentHierarchyMaxlength: any = 0;\r\n  private keynode: any;\r\n  \r\n  private TreeLength: any = 0;\r\n  private TreeWidth: any = 0.1;\r\n\r\n  private sizeX: any = window.innerWidth;\r\n  private sizeY: any = window.innerHeight;\r\n\r\n  public mergingEnabled: boolean = false;\r\n  public transferringEnabled: boolean = false;\r\n  public copyingEnabled: boolean = false;\r\n  public activeleave: any;\r\n\r\n  constructor(traverser: ProvenanceGraphTraverser, elm: HTMLDivElement) {\r\n    this.traverser = traverser;\r\n    this.colorScheme = d3.scaleOrdinal(d3.schemeAccent);\r\n\r\n    this.container = d3.select(elm)\r\n      .append('div')\r\n      .attr('class', 'visualizationContainer')\r\n      .attr('style', 'width: 100%; height:' + `${window.innerHeight}` + 'px');\r\n    provGraphControls(this);\r\n\r\n    // Append svg element\r\n    this.svg = this.container\r\n      .append('div')\r\n      .append('svg')\r\n      .attr(\r\n        'style',\r\n        `overflow: visible; width: 100%; height: 100%; font-size: ${fontSize}px; line-height: ${fontSize}px`\r\n      );\r\n\r\n    this.g = this.svg.append('g');\r\n\r\n    // Append grouping buttons\r\n    addAggregationButtons(this.container, this);\r\n\r\n    // Disable dbclick zoom\r\n    this.svg.on('dblclick.zoom', null);\r\n\r\n    traverser.graph.on('currentChanged', async () => {\r\n      await this.update();\r\n      (window as any).slideDeckViz.onChange(this.activeleave);\r\n      (window as any).slideDeckViz.provchanged(traverser.graph.current);\r\n    });\r\n\r\n    traverser.graph.on('nodeChanged', () => {\r\n      this.update();\r\n    });\r\n\r\n    traverser.graph.on('nodeAdded', (event) => {\r\n      this.currentHierarchyNodelength += 1.0;\r\n      this.scaleToFit();\r\n      this.numberofnodeswcam++;\r\n      if(!cam_test(event.label) && this.camera_show)\r\n        this.numberofnodeswocam++;\r\n    });\r\n\r\n    this.update();\r\n    this.zoomer = d3.zoom() as any;\r\n    this.setZoomExtent();\r\n    this.svg.call(this.zoomer);\r\n    this.svg.on('dblclick.zoom', (event) =>{return null;});\r\n  }\r\n  public setZoomExtent() {\r\n    this.zoomer.scaleExtent([0.1, 10]).on('zoom', () => {\r\n      this.g.attr('transform', (d3 as any).event.transform);\r\n    });\r\n    this.scaleToFit();\r\n  }\r\n\r\n  public scaleToFit() {\r\n\r\n\r\n    const maxScale = 3;\r\n    const magicNum = 0.75; // todo: get relevant number based on dimensions\r\n    this.sizeX = window.innerWidth * 0.2;\r\n    this.sizeY = window.innerHeight;\r\n    const margin = 0;\r\n    const node_length = (this.currentHierarchyNodelength) * yScale * maxScale;\r\n    const node_width = (this.TreeWidth) * xScale * maxScale;\r\n    const node_max = Math.floor(this.sizeY / (yScale * maxScale));\r\n    const trans_y = (node_length > this.sizeY)? (this.currentHierarchyNodelength - node_max + margin) * yScale * maxScale: -20;\r\n\r\n\r\n    const scaleFactor = Math.min(\r\n      maxScale,\r\n      (magicNum * this.sizeY) / (this.currentHierarchyNodelength * yScale),\r\n      (magicNum * this.sizeX) / (this.TreeWidth * -xScale)\r\n    );\r\n\r\n    this.svg\r\n      .transition()\r\n      .duration(0)\r\n      .call(this.zoomer.transform, () =>\r\n        d3.zoomIdentity.translate(this.sizeX / 2.1, -trans_y).scale(maxScale)\r\n      );\r\n  }\r\n  \r\n  public linkPath({\r\n    source,\r\n    target\r\n  }: {\r\n    source: HierarchyPointNode<IGroupedTreeNode<ProvenanceNode>>;\r\n    target: HierarchyPointNode<IGroupedTreeNode<ProvenanceNode>>;\r\n  }): string {\r\n    const [s, t] = [source, target];\r\n\r\n    // tslint:disable-next-line\r\n    return `M${s.x * xScale},${s.y * yScale}\r\n              C${s.x * xScale},  ${(s.y * yScale + t.y * yScale) / 2} ${t.x *\r\n      xScale},  ${(s.y * yScale + t.y * yScale) / 2} ${t.x * xScale},  ${t.y *\r\n      yScale}`;\r\n  }\r\n  /**\r\n   * @descriptionWrap text labels\r\n   */\r\n  public wrap(text: any, width: any) {\r\n    text.each(function () {\r\n      const words = text\r\n        .text()\r\n        .split(/(?=[A-Z])/)\r\n        .reverse();\r\n      let word,\r\n        line = [],\r\n        lineNumber = 0;\r\n      const lineHeight = 1.0, // ems\r\n        y = text.attr('y'),\r\n        dy = 0;\r\n      let tspan = text\r\n        .text(null)\r\n        .append('tspan')\r\n        .attr('x', 7)\r\n        .attr('y', y)\r\n        .attr('dy', dy + 'em');\r\n      while ((word = words.pop())) {\r\n        line.push(word);\r\n        tspan.text(line.join(' '));\r\n        if (tspan.node().getComputedTextLength() > width) {\r\n          line.pop();\r\n          tspan.text(line.join(' '));\r\n          line = [word];\r\n          tspan = text\r\n            .append('tspan')\r\n            .attr('x', 7)\r\n            .attr('y', y)\r\n            .attr('dy', ++lineNumber * lineHeight + dy + 'em')\r\n            .text(word);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public camerahide(): void {\r\n    function find_noncameranode(c_trav : any) {\r\n      let traverser = c_trav.graph.current;\r\n      if(traverser.label === \"root\")\r\n        return traverser;\r\n      do{        \r\n        const searchpattern = cam_test(traverser.label);\r\n        if(!searchpattern)\r\n          return traverser;\r\n        traverser = traverser.parent;\r\n        } while(traverser.label !== \"root\");\r\n      return traverser;\r\n    }\r\n    this.camera_show = this.camera_show ? false : true;\r\n    if(!this.camera_show){\r\n      this.groupnumber = 0;\r\n      const closenode = find_noncameranode(this.traverser);\r\n      this.traverser.toStateNode(closenode.id, 0);\r\n    }\r\n    this.update();\r\n    this.getFullsizeview();\r\n  }\r\n\r\n  public getFullsizeview(): void {\r\n    this.sizeX = window.innerWidth * 0.2;\r\n    this.sizeY = window.innerHeight;\r\n    const maxScale = 3;\r\n    const margin = 0;\r\n    const node_length = (this.currentHierarchyMaxlength + 1 + margin) * yScale * maxScale;\r\n    const node_max = this.sizeY / node_length;\r\n    //Need to Modify\r\n    const tx = (this.TreeWidth >= 4) ? (this.sizeX / 1.8) : (this.sizeX / 2);\r\n    const scaleFactor = Math.min(\r\n      maxScale,\r\n      maxScale * node_max,\r\n      maxScale * this.sizeX / (this.TreeWidth * -xScale * 2.1 * maxScale)\r\n    ); // find the smallest scale(Length, Width, )\r\n    this.svg\r\n    .transition()\r\n    .duration(0)\r\n    .call(this.zoomer.transform, () =>\r\n      d3.zoomIdentity.translate(tx, 20).scale(scaleFactor) // fix size\r\n    );\r\n  }\r\n\r\n\r\n  public setTraverser(traverser: ProvenanceGraphTraverser): void {\r\n    this.traverser = traverser;\r\n  }\r\n\r\n  public removeNodesAndLinkChildren<T>(tree: IGroupedTreeNode<T>, condition: (node: IGroupedTreeNode<T>) => boolean): IGroupedTreeNode<T> {\r\n    const removeNodes = (node: IGroupedTreeNode<T>) => {\r\n      for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i];\r\n  \r\n        if (condition(child)&& !child.bookmarked) {\r\n          // Remove the node from the children array\r\n          node.children.splice(i, 1);\r\n  \r\n          // Append the children of the removed node to the parent\r\n          node.children.push(...child.children);\r\n  \r\n          // Decrement the index to recheck the same position after the update\r\n          i--;\r\n        } else {\r\n          // Recursively call removeNodes for the child\r\n          removeNodes(child);\r\n        }\r\n      }\r\n    };\r\n    removeNodes(tree);\r\n  \r\n    return tree;\r\n  }\r\n\r\n  public async deleteNode(): Promise<void> {\r\n    this.traverser.graph.current;\r\n    if (this.traverser.graph.current.label === \"root\") return;\r\n  \r\n    if (this.traverser.graph.current.label !== 'root') {\r\n      const current_node = this.traverser.graph.current as any;\r\n      const parent_node = current_node.parent;\r\n      const parent_children = parent_node.children;\r\n      const current_index = parent_children.indexOf(current_node);\r\n  \r\n      const deleteChildrenRecursively = (node: any) => {\r\n        if (node.children.length > 0) {\r\n          node.children.forEach((child: any) => deleteChildrenRecursively(child));\r\n        }\r\n        node.children = [];\r\n        if(cam_test(node.label)){\r\n          this.numberofnodeswocam--;\r\n          this.numberofnodeswcam--;\r\n        }\r\n\r\n        else\r\n          this.numberofnodeswcam--;\r\n\r\n        if(node.metadata.bookmarked)\r\n          (window as any).slideDeckViz.onDelete(null);\r\n      };\r\n  \r\n      deleteChildrenRecursively(current_node);\r\n      parent_children.splice(current_index, 1);\r\n      if(parent_node.children.length > 0)\r\n        this.traverser.toStateNode(parent_node.children[0].id, 0);\r\n      this.traverser.toStateNode(parent_node.id, 0);\r\n    }\r\n  }\r\n  \r\n  \r\n  public Grouping_hierarchy<T>(wraproot: IGroupedTreeNode<ProvenanceNode>): d3.HierarchyNode<IGroupedTreeNode<ProvenanceNode>> {\r\n    let hierarchyRoot = d3.hierarchy(wraproot);\r\n    let allnodes = hierarchyRoot.descendants().filter((d: any) => d.data.wrappedNodes[0].label !== 'Root' && d.data.depth !== 1);\r\n    let branches = allnodes.reduce((sum: number, node: any) => {\r\n      if (node.data.children.length > 1) {\r\n        return sum + node.data.children.length;\r\n      } else {\r\n        return sum;\r\n      }\r\n    }, 0);\r\n    if(hierarchyRoot.children != undefined){\r\n      hierarchyRoot.children!.forEach((child: any) => {\r\n          branches++;\r\n      });\r\n    }\r\n    \r\n    allnodes = allnodes.filter((d:any) => d.parent.children.length == 1); // exclude branches merging\r\n    allnodes.sort((a, b) => {\r\n      return a.data.wrappedNodes[0].metadata.H_value - b.data.wrappedNodes[0].metadata.H_value;\r\n    });\r\n    \r\n    console.log('======Before======')\r\n    console.log(allnodes.map(node => node.depth));\r\n    console.log(allnodes.map(node => node.data.wrappedNodes[0].metadata.H_value));\r\n    console.log(allnodes.map(node => node.data.wrappedNodes[0].metadata.O_group));\r\n\r\n    //size-calculation (왔다 갔다 할 경우 고려해야함)\r\n    const uniqueValues = allnodes\r\n    .filter(node => node.parent!.data.wrappedNodes[0].metadata.O_group != node.data.wrappedNodes[0].metadata.O_group && node.parent!.data.children.length == 1 && node.parent!.data.wrappedNodes[0].label != 'Root')\r\n    .map(node => node.data.wrappedNodes[0].metadata.O_group);\r\n\r\n    this.numberOfUniqueValues = uniqueValues.length + branches;\r\n    // console.log('uniqueValues', uniqueValues);\r\n    // console.log('branches', branches);\r\n\r\n\r\n    const groupslicenodes = allnodes.slice(0, this.groupnumber);\r\n    groupslicenodes.sort((a, b) => {return b.depth - a.depth});\r\n    groupslicenodes.sort((a, b) => {return a.data.wrappedNodes[0].metadata.branchnumber - b.data.wrappedNodes[0].metadata.branchnumber})\r\n    let Endnode = 0;\r\n    let Startnode = 0;\r\n    for(let i = 0; i<groupslicenodes.length; i++){\r\n      if (groupslicenodes[i].data.wrappedNodes[0].metadata.branchnumber != groupslicenodes[i+1]?.data.wrappedNodes[0].metadata.branchnumber)\r\n      {\r\n        transferChildren(groupslicenodes[i].parent!.parent! as any, groupslicenodes[i].parent! as any, groupslicenodes[i] as any);\r\n      }\r\n      else if(groupslicenodes[i].depth - groupslicenodes[i+1]?.depth == 1){\r\n        Startnode = i;\r\n        Endnode = i+1;\r\n        for(Endnode; Endnode<groupslicenodes.length; Endnode++){\r\n          if(groupslicenodes[Endnode].depth - groupslicenodes[Endnode+1]?.depth != 1 || \r\n            groupslicenodes[Endnode].data.wrappedNodes[0].metadata.branchnumber != groupslicenodes[Endnode+1]?.data.wrappedNodes[0].metadata.branchnumber){\r\n            break;\r\n          }\r\n        }\r\n        transferChildren_2(groupslicenodes[Endnode].parent, groupslicenodes[Endnode],groupslicenodes[Startnode]);\r\n        i = Endnode;\r\n      }\r\n      else{\r\n        transferChildren(groupslicenodes[i].parent!.parent! as any, groupslicenodes[i].parent! as any, groupslicenodes[i] as any);\r\n      }\r\n\r\n    }\r\n\r\n    hierarchyRoot = d3.hierarchy(wraproot); // Updated the treeRoot\r\n    console.log('======After======')\r\n    console.log(groupslicenodes);\r\n    console.log(groupslicenodes.map(node => node.depth));\r\n    console.log(groupslicenodes.map(node => node.data.wrappedNodes[0].metadata.H_value));\r\n    console.log(groupslicenodes.map(node => node.data.wrappedNodes[0].metadata.O_group));\r\n\r\n    return hierarchyRoot;\r\n  }\r\n  /**\r\n   * @description Update the tree layout.\r\n   */\r\n  public update = ()  =>  {\r\n    console.log('update');\r\n    this.traverser.graph.root.children.forEach((child: any) => {\r\n      child.metadata.H_value = 1000000;\r\n    });\r\n    let wrappedRoot = wrapNode(this.traverser.graph.root);\r\n    let clonedWrappedRoot = wrapNode(this.traverser.graph.root);\r\n    let camhideNodes = this.removeNodesAndLinkChildren(clonedWrappedRoot, node => node.camera === true); \r\n\r\n    let hierarchyRoot;\r\n    // aggregateNodes(this.aggregation, wrappedRoot, this.traverser.graph.current);\r\n    if (this.camera_show == true){\r\n      // hierarchyRoot = d3.hierarchy(wrappedRoot); // Updated the treeRoot\r\n      this.numberofnodes = this.numberofnodeswcam;\r\n      hierarchyRoot = this.Grouping_hierarchy(wrappedRoot);\r\n      \r\n    }\r\n\r\n    else{\r\n      hierarchyRoot = d3.hierarchy(camhideNodes);\r\n      if(cam_test(this.traverser.graph.current.label)){\r\n        this.currentHierarchyNodelength = hierarchyRoot.path(this.keynode\r\n          ).length;\r\n        this.scaleToFit();\r\n      }\r\n      this.numberofnodes = this.numberofnodeswocam;\r\n      hierarchyRoot = this.Grouping_hierarchy(camhideNodes);\r\n    }\r\n    let currentHierarchyNode = undefined;\r\n    hierarchyRoot.each(node => {\r\n      if (node.data.wrappedNodes.includes(this.traverser.graph.current)) {\r\n        currentHierarchyNode = node;\r\n      }\r\n    });\r\n    if (currentHierarchyNode === undefined) {\r\n      this.traverser.toStateNode(hierarchyRoot.leaves()[0].data.wrappedNodes[0].id);\r\n      this.traverser.toStateNode(this.traverser.graph.root.id);\r\n      return;\r\n    }\r\n    this.currentHierarchyNodelength = hierarchyRoot.path(currentHierarchyNode as d3.HierarchyNode<IGroupedTreeNode<ProvenanceNode>>).length;\r\n    const tree = gratzl(hierarchyRoot, currentHierarchyNode as d3.HierarchyNode<IGroupedTreeNode<ProvenanceNode>>);\r\n    this.hierarchyRoot = tree;\r\n    const treeNodes = tree.descendants().filter((d: any) => d.data.wrappedNodes[0].metadata.option !== 'merged');\r\n    const treemaxwidth = tree.descendants().map(function (item) {return item.x}).reduce(function(prev, current) {return (prev > current) ? prev : current});\r\n    const treemaxlength = tree.descendants().map(function (item) {return item.y}).reduce(function(prev, current) {return (prev > current) ? prev : current});\r\n    this.currentHierarchyMaxlength = treemaxlength;\r\n    const oldNodes = this.g.selectAll('g').data(treeNodes, (d: any) => {\r\n      const data = d.data.wrappedNodes.map((n: any) => n.id).join();\r\n      return data;\r\n    });\r\n\r\n    // console.log(treemaxwidth);\r\n    this.TreeWidth = Math.max(this.TreeWidth,treemaxwidth);\r\n    this.TreeLength = Math.max(this.TreeLength,treemaxlength);\r\n    oldNodes.exit().remove();\r\n    // group wrapping a node\r\n    const newNodes = oldNodes\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'node')\r\n      .attr(\r\n        'transform',\r\n        (d: any) => `translate(${d.x * xScale}, ${d.y * yScale})`\r\n      );\r\n\r\n    // node label\r\n  let hoverTimeout: any;\r\n\r\n    const updateNodes = newNodes.merge(oldNodes as any);\r\n    updateNodes.selectAll('g.normal').remove();\r\n    updateNodes.selectAll('g.bookmarked').remove();\r\n    updateNodes.selectAll('.circle-text').remove();\r\n    updateNodes.selectAll('.circle-label').remove();\r\n    updateNodes.selectAll('.circle-img').remove();\r\n    const getNodeSize = (node: any) => {\r\n      let counter = 0;\r\n      const countWrappedNodesRecursively = (currentNode: ProvenanceNode[]) => {\r\n        counter += currentNode.length;\r\n        currentNode.forEach((nodes: any) => {\r\n            if (nodes.wrappedNodes) {\r\n              countWrappedNodesRecursively(nodes.wrappedNodes as any);\r\n            }\r\n          });\r\n      };\r\n    \r\n      countWrappedNodesRecursively(node.wrappedNodes);      \r\n      \r\n      return Math.min(2.7 + 0.6 * node.wrappedNodes.length, 7);\r\n    };\r\n\r\n    updateNodes\r\n    .append('text')\r\n    .attr('class', 'circle-label')\r\n    .text(d => groupNodeLabel(d.data)) // .text(d => d.data.neighbour.toString())\r\n    .attr('x', d => d.data.wrappedNodes.length<=4? 7:9)\r\n    .attr('alignment-baseline', 'central');\r\n\r\n\r\n  \r\n  updateNodes\r\n  .append('foreignObject')\r\n  .attr('class', 'circle-img')\r\n  .attr('width', 15)\r\n  .attr('height', 15)\r\n  .attr('x', 7)\r\n  .attr('y', -17)\r\n  .html(d => {\r\n    if (d.data.wrappedNodes[0].metadata.screenshot) {\r\n      return `<div><img class=\"thumbnail\" src=\"${d.data.wrappedNodes[0].metadata.screenshot}\" width=\"15\" height=\"15\" /></div>`;\r\n    } else {\r\n      return '';\r\n    }\r\n  })\r\n  .on('mouseenter', function (d: any) {\r\n    if (d.data.wrappedNodes[0].metadata.screenshot) {\r\n      // Clear any existing timeout\r\n      clearTimeout(hoverTimeout);\r\n\r\n      // Raise the current circle-img element to the top\r\n    d3.select(this).raise();\r\n\r\n      // Set a timeout to resize the circle-img and thumbnail after .5 second\r\n      hoverTimeout = setTimeout(() => {\r\n        this.setAttribute('width', '50');\r\n        this.setAttribute('height', '50');\r\n        const thumbnail = this.querySelector('.thumbnail');\r\n        if (thumbnail) {\r\n          (thumbnail as HTMLElement).style.width = '50px';\r\n          (thumbnail as HTMLElement).style.height = '50px';\r\n        }\r\n      }, 300);\r\n    }\r\n  })\r\n  .on('mouseleave', function () {\r\n    // Clear the timeout and reset the circle-img and thumbnail size\r\n    clearTimeout(hoverTimeout);\r\n    this.setAttribute('width', '15');\r\n    this.setAttribute('height', '15');\r\n    const thumbnail = this.querySelector('.thumbnail');\r\n    if (thumbnail) {\r\n      (thumbnail as HTMLElement).style.width = '15px';\r\n      (thumbnail as HTMLElement).style.height = '15px';\r\n    }\r\n  });\r\n\r\n    // other nodes to circle\r\n    updateNodes\r\n      .filter((d: any) => {\r\n        return !d.data.wrappedNodes.some(\r\n          (node: ProvenanceNode) => node.metadata.isSlideAdded\r\n        );\r\n      })\r\n      .append('g')\r\n      .attr('class', 'normal');\r\n\r\n\r\n    updateNodes.on('contextmenu', async (d: any) => {\r\n      if(d.data.wrappedNodes.length !=1)\r\n        return;\r\n      await this.traverser.toStateNode(d.data.wrappedNodes[0].id, 0);\r\n      this.traverser.graph.current = this.traverser.graph.getNode(d.data.wrappedNodes[0].id);\r\n      d.data.wrappedNodes[0].metadata.bookmarked = !d.data.wrappedNodes[0].metadata.bookmarked;\r\n      if (!d.data.wrappedNodes[0].metadata.bookmarked) {\r\n        (window as any).slideDeckViz.onDelete(null);\r\n      } else {\r\n        (window as any).slideDeckViz.onAdd(this.traverser.graph.current);\r\n      }\r\n      this.update();\r\n    });\r\n    // set classes on node\r\n    updateNodes\r\n        .attr('class', 'node')\r\n        .filter((d: any) => {\r\n        if (d.x === 0) {\r\n          d.data.wrappedNodes[0].metadata.mainbranch = true;\r\n        }\r\n        else {\r\n          d.data.wrappedNodes[0].metadata.mainbranch = false;\r\n        }\r\n        return d.x === 0; \r\n      })\r\n      .attr('class', 'node branch-active')\r\n      .filter((d: any) => {\r\n        let neighbourNode: boolean = false;\r\n        if ((this.traverser.graph.current as any).parent) { // 위에 뭐가 있는지 확인\r\n          neighbourNode = (this.traverser.graph.current as any).parent === d.data.wrappedNodes[0] ? true : neighbourNode; // 현 노드에 위가 있으면 네이버는 참\r\n          d.data.wrappedNodes[0].metadata.neighbour = neighbourNode ? true : neighbourNode;\r\n        }  \r\n        if ((this.traverser.graph.current as any).children.length !== 0) {\r\n          for (const child of (this.traverser.graph.current as any).children){\r\n            neighbourNode = d.data.wrappedNodes.includes(child) ? true : neighbourNode;\r\n            d.data.wrappedNodes[0].metadata.neighbour = neighbourNode ? true : neighbourNode;\r\n          }\r\n        }\r\n        return neighbourNode;\r\n      })      \r\n      .attr('class', 'node branch-active neighbour');\r\n\r\n\r\n      updateNodes\r\n      .filter((d: any) => {\r\n        if(d.data.wrappedNodes.length == 1){\r\n          const ref = d.data.wrappedNodes.includes(this.traverser.graph.current);\r\n          return ref;\r\n        }\r\n      })\r\n      .attr('class', 'node branch-active neighbour node-active');\r\n\r\n    hierarchyRoot.leaves().forEach((node: any) => {\r\n      if(node.data.wrappedNodes[0].metadata.mainbranch)\r\n        this.activeleave = node;\r\n    });\r\n    updateNodes\r\n      .select('g')\r\n      .append((d: any) => {\r\n        const isBookmarked = d.data.wrappedNodes.some((node: any) => {\r\n          return node.metadata.bookmarked === true;\r\n        });\r\n        // Check if the node is bookmarked\r\n        if (isBookmarked && d.data.wrappedNodes.length == 1) {\r\n          // If yes, create a square shape\r\n          return document.createElementNS(d3.namespaces.svg, 'rect');\r\n        } \r\n        else {\r\n          // Otherwise, create a circle shape\r\n        if(d.data.wrappedNodes.length == 1) \r\n            return document.createElementNS(d3.namespaces.svg, 'circle');\r\n        else { // ordinal creator\r\n            // Initialize the colorScale array\r\n            const colorScale: string[] = [];\r\n\r\n            // Populate the colorScale array based on the conditions\r\n            d.data.wrappedNodes.forEach((node: any) => {\r\n              if (node.metadata.bookmarked === true) {\r\n                colorScale.push('#a94442');\r\n              } else if (node.label.includes('Camera') || node.label.includes('View')) {\r\n                colorScale.push('#60aa85');\r\n              } else if (node.label.includes('SelectObject')) {\r\n                colorScale.push('#b8852c');\r\n              } else if (node.label.includes('TranslateObject') || node.label.includes('RotateObject')) {\r\n                colorScale.push('#286090');\r\n              } else if (node.label.includes('Measurement')) {\r\n                colorScale.push('#9210dd');\r\n              }\r\n            });\r\n\r\n            // Create an array of objects containing label and value properties\r\n            const data = d.data.wrappedNodes.map((node: any) => ({\r\n              label: node, // Use the entire original node object as the label\r\n              value: 1\r\n            }));\r\n            // Calculate pie chart data\r\n            const pieChartData = d3.pie<{ label: object; value: number }>().value((d: any) => d.value)(data);\r\n            const pieGroup = document.createElementNS(d3.namespaces.svg, 'g');\r\n            pieChartData.reverse();\r\n            const arc = d3.arc().outerRadius(getNodeSize(d.data)).innerRadius(0);\r\n            let tempactive: SVGPathElement;\r\n            // Iterate over the pie chart data and create the pie slices\r\n            pieChartData.forEach((slice: any, index: number) => {\r\n\r\n              const path = document.createElementNS(d3.namespaces.svg, 'path');\r\n              const pathElement = path as SVGPathElement;\r\n              pathElement.setAttribute('d', arc(slice) as string);\r\n              pathElement.setAttribute('fill', colorScale[index]);\r\n            \r\n              // Add class to the path element based on the condition\r\n              if (data[index].label === this.traverser.graph.current) {\r\n                pathElement.setAttribute('class', 'node-activepie');\r\n                tempactive = pathElement;\r\n              }\r\n            \r\n              pathElement.addEventListener('click', async () => {\r\n                if(tempactive)\r\n                  tempactive.setAttribute('class', '');\r\n                await this.traverser.toStateNode(data[index].label.id, 0); // set to 0 to all trans related work\r\n            \r\n                // Add class to the clicked path element\r\n                pathElement.setAttribute('class', 'node-activepie');\r\n                tempactive = pathElement;\r\n              });\r\n              pathElement.addEventListener('contextmenu', async (event: MouseEvent) => {\r\n                await this.traverser.toStateNode(data[index].label.id, 0);\r\n                this.traverser.graph.current = this.traverser.graph.getNode(data[index].label.id);\r\n                data[index].label.metadata.bookmarked = !data[index].label.metadata.bookmarked;\r\n                if (!data[index].label.metadata.bookmarked) {\r\n                  (window as any).slideDeckViz.onDelete(null);\r\n                } else {\r\n                  (window as any).slideDeckViz.onAdd(this.traverser.graph.current);\r\n                }\r\n                this.update();\r\n              });\r\n              pieGroup.appendChild(path);\r\n            });\r\n\r\n            return pieGroup;\r\n          }\r\n          \r\n        }\r\n      })\r\n      .attr('class', (d: any) => {\r\n        let classString = '';\r\n        const isBookmarked = d.data.wrappedNodes.some((node: any) => {\r\n          return node.metadata.bookmarked === true;\r\n        });\r\n        if (isBookmarked) {\r\n          classString += ' bookmarked';\r\n        } else if (d.data.wrappedNodes[0].metadata.loaded === true) {\r\n          classString += ' loaded';\r\n        }\r\n        if (isKeyNode(d.data.wrappedNodes[0])) {\r\n          classString += ' keynode';\r\n          this.keynode = d;\r\n        }\r\n        classString += ' intent_' + getNodeIntent(d.data.wrappedNodes[0]);\r\n        return classString;\r\n      })\r\n      .attr('r', (d: any) => {\r\n        let nodeSize: number = getNodeSize(d.data);\r\n        if (d.data.wrappedNodes[0].metadata.neighbour === true) {\r\n          nodeSize = getNodeSize(d.data) * 1;\r\n        }\r\n        if (d.data.wrappedNodes.includes(this.traverser.graph.current)) {\r\n          nodeSize = getNodeSize(d.data) * 1;\r\n        }\r\n        return nodeSize;\r\n      })\r\n      .attr('width', (d: any) => {\r\n        // Set square width based on node size if bookmarked\r\n        return getNodeSize(d.data) * 2;\r\n      })\r\n      .attr('height', (d: any) => {\r\n        // Set square height based on node size if bookmarked\r\n        return getNodeSize(d.data) * 2;\r\n      })\r\n      .attr('x', (d: any) => {\r\n        // Position square based on node size if bookmarked\r\n        const isBookmarked = d.data.wrappedNodes.some((node: any) => {\r\n          return node.metadata.bookmarked === true;\r\n        });\r\n        if (isBookmarked) {\r\n          return -getNodeSize(d.data);\r\n        }\r\n        else\r\n          return 7\r\n\r\n      })\r\n      .attr('y', (d: any) => {\r\n        // Position square based on node size if bookmarked\r\n        const isBookmarked = d.data.wrappedNodes.some((node: any) => {\r\n          return node.metadata.bookmarked === true;\r\n        });\r\n        if (isBookmarked) {\r\n          return -getNodeSize(d.data);\r\n        }\r\n        else\r\n          return -17\r\n      });\r\n    // hide labels not in branch\r\n    updateNodes\r\n      .select('text.circle-label')\r\n      .attr('class', (d: any) => 'circle-label renderer_' + getNodeRenderer(d.data.wrappedNodes[0]))\r\n      .attr('visibility', (d: any) => (d.x === 0 ? 'visible' : 'hidden'));\r\n\r\n    updateNodes\r\n      .select('foreignObject.circle-img')\r\n      .attr('class', (d: any) => 'circle-img renderer_' + getNodeRenderer(d.data.wrappedNodes[0]))\r\n      .attr('visibility', (d: any) => (d.x === 0 ? 'visible' : 'hidden'));\r\n    \r\n    updateNodes.on('click', async (d,i) => {\r\n      if(d.data.wrappedNodes.length > 1){\r\n        // this.traverser.toStateNode(d.data.wrappedNodes[i].id, 0);\r\n      }\r\n      else if(d.data.wrappedNodes[0].id !== this.traverser.graph.current.id){\r\n        await this.traverser.toStateNode(d.data.wrappedNodes[0].id, 0); // set to 0 to all trans related works\r\n      }\r\n    });\r\n\r\n\r\n    updateNodes\r\n      .data(treeNodes)\r\n      .transition()\r\n      .duration(500)\r\n      .attr(\r\n        'transform',\r\n        (d: any) => {\r\n          if (d.x > treeWidth && treeWidth <= maxtreeWidth) {\r\n            var classString = `translate(${d.x * xScale}, ${d.y * yScale})`;\r\n            treeWidth = d.x;\r\n            if (treeWidth % p) {\r\n            }\r\n          } else {\r\n            var classString = `translate(${d.x * xScale}, ${d.y * yScale})`;\r\n          }\r\n          return classString;\r\n        }\r\n      );\r\n\r\n    // Raise each node in newNodes in reverse order\r\n    updateNodes.nodes().slice().reverse().forEach(node => {\r\n      d3.select(node).raise();\r\n    });\r\n\r\n    const oldLinks = this.g\r\n      .selectAll('path.link')\r\n      .data(tree.links()\r\n        .filter((d: any) => d.target.data.wrappedNodes[0].metadata.option !== 'merged'),\r\n        (d: any) => d.target.data.wrappedNodes.map((n: any) => n.id).join()\r\n      );\r\n\r\n    oldLinks.exit().remove();\r\n\r\n    const newLinks = oldLinks\r\n      .enter()\r\n      .insert('path', 'g')\r\n      .attr('d', (d: any) => this.linkPath(d));\r\n\r\n    oldLinks\r\n      .merge(newLinks as any)\r\n      .attr('class', 'link')\r\n      .filter((d: any) => d.target.x === 0)\r\n      .attr('class', 'link active');\r\n\r\n    oldLinks\r\n      .merge(newLinks as any)\r\n      .transition()\r\n      .duration(500)\r\n      .attr('d', (d: any) => this.linkPath(d));\r\n\r\n    const updatedLinks = oldLinks.merge(newLinks as any);\r\n    if (this.caterpillarActivated) {\r\n      caterpillar(updateNodes, treeNodes, updatedLinks, this);\r\n    }\r\n    this.real_traverser = updateNodes;\r\n  } // end update\r\n\r\n  public getTraverser(): ProvenanceGraphTraverser {\r\n    return this.traverser;\r\n  }\r\n}"],"names":["d3.select","d3.selectAll","d3.hierarchy","gratzl","d3.namespaces","d3.pie","arc","d3.arc","d3.scaleOrdinal","d3.schemeAccent","d3.zoom","d3.event","d3.zoomIdentity"],"mappings":"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"}